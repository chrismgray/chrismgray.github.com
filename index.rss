<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>Hiking and Coding</title>
<link>http://chrismgray.github.com//</link>
<description>Hiking and Coding</description>
<item>

	<title>100-mile-wilderness</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/hiking/100-mile-wilderness/</guid>

	<link>http://chrismgray.github.com//posts/hiking/100-mile-wilderness/</link>


	<category>at</category>

	<category>hiking</category>


	<pubDate>Sat, 19 Nov 2011 13:34:35 -0700</pubDate>
	<dcterms:modified>2011-11-19T20:34:35Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;The 100-Mile Wilderness &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Right after the huge challenge of climbing Mount Katahdin,
  southbound hikers on the Appalachian Trail must deal with about 100
  miles without any stores or conveniences.  As I mentioned in my &lt;a href=&quot;http://chrismgray.github.com/posts/hiking/at-01.html&quot;&gt;last hiking post&lt;/a&gt;, this means big and heavy packs for the hikers.  Also,
  my lack of experience meant that I was carrying things that I didn&#39;t
  really need, so when I set out on the first morning I was really
  loaded down.
&lt;/p&gt;
&lt;p&gt;
  I got out of camp a bit later than Oblio and his dad, and walked out
  of Baxter Park.  I don&#39;t remember too much about the first day.
  There was a decent-sized river that we walked beside for a while and
  I thought I saw a beaver or some other water animal, but I couldn&#39;t
  get close enough to get a picture.
&lt;/p&gt;
&lt;p&gt;
  We officially entered the 100-mile wilderness when we passed this
  &lt;a href=&quot;https://picasaweb.google.com/lh/photo/PZEL0R-SlLrRdqSIKN-5UHIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;sign&lt;/a&gt;, and didn&#39;t walk more than 100 yards before we saw some moose
  dung.  That seemed like a good sign to me.  Where there&#39;s dung,
  there&#39;s animals.  A couple of miles later, it was time to call it a
  day at the first shelter on the AT.  The log in the shelter warned
  of rodents, so I immediately decided not to sleep in it.  We also
  met some northbounders (nobos in AT parlance).  At that time, I
  viewed them as something like heroes.  These were people that were
  just 10 or 12 miles from finishing the same hike that I was on.
  Wow!  They were so close to the finish line that they were going
  on.  They would probably do half the miles that we had done in the
  entire day in that evening.
&lt;/p&gt;
&lt;p&gt;
  The next day, I got up fairly early.  There was a small hill, and
  then the trail goes around a lake.  The trail was mucky and the
  boards (called &quot;bog boards&quot;) that were placed for people to walk on
  were disintegrating.  Finally we got away from the lake and the
  trail conditions became a bit better.  We crossed &lt;a href=&quot;https://picasaweb.google.com/lh/photo/mv9x4neQvulRVGCYQzUTNHIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;this bridge&lt;/a&gt; and
  got to &lt;a href=&quot;https://picasaweb.google.com/lh/photo/D2nJ4h_FzubDnoCOSgy6u3IQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;the Rainbow Stream shelter&lt;/a&gt; (I see that Picker and Grinner got
  there before me).  I took a small nap on the pine needles behind the
  shelter and cleaned off my legs in the pool below &lt;a href=&quot;https://picasaweb.google.com/lh/photo/GFBLdt6vU4QgYQIJRgkYinIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;this waterfall&lt;/a&gt;.
  Finally, I started walking again.  About two miles later, I stumbled
  and decided that I must be getting tired and that I should look for
  a place to camp.  Luckily, I found that Oblio and his dad camped
  just a few hundred yards later, so I stopped there for the night.
&lt;/p&gt;
&lt;p&gt;
  I don&#39;t really remember much about the next couple of days.  On one
  of them, I got bitten by a mosquito on the lip, and my lip swelled
  to twice its normal size.  There was also a river that was reputed
  to have good swimming, but the water was quite warm because it is
  lake-fed.  I hiked a couple of miles past it and camped at the lake
  that was the source.  A float plane landed on the lake while I was
  there, but it was all the way on the other side of the lake, so it
  wasn&#39;t too bothersome.  I had a quiet night, but Picker and Grinner
  didn&#39;t; there was a group of Quebecois Girl Scouts at the campsite
  next to the river and they stayed up late chattering.
&lt;/p&gt;
&lt;p&gt;
  Picker and Grinner passed me early the next morning in what would
  become a pattern.  The two of them were much more efficient than me
  in the morning, especially while I was still cooking oatmeal for
  breakfast.  That day was the first where I had a big choice to
  make.  Would I hike fast and get over White Cap or would I stop just
  before it?  I didn&#39;t have a data book at that point, so I had no
  real way of knowing how hard White Cap would be, but people had been
  hyping it for a while as a pretty hard climb.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;White Cap &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;


&lt;p&gt;
   When I got to the shelter just before White Cap, I made the choice
   to go on.  The next shelter was just two or three miles away and it
   wasn&#39;t yet late.  This turned out to be a slight mistake.  The
   climb up White Cap wasn&#39;t too bad (though it would turn out to be
   too much for Oblio&#39;s dad &amp;ndash; he had to be helped down the mountain
   and he and Oblio called it quits there), but there were about three
   more mountains to go over before I got to the campsite.  It was in
   that moment that I first learned the value of having a data book,
   though I don&#39;t think it quite sunk in until I got through with
   Maine.
&lt;/p&gt;
&lt;p&gt;
   Another reason that hiking over White Cap that evening was a
   mistake was that there was a large group of Quebecois boys at the
   campsite and they kept making noise until about one the next
   morning.  However, I did get woken up by a moose, so maybe that&#39;s a
   wash.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Chairback &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;


&lt;p&gt;
   The next day was probably my shortest full day of hiking on the
   trail.  I was clearly tired from my adventure (and the noise made
   by the boys) the night before and I just walked pretty slow in the
   morning.  I also had not counted on the climb up the next mountain
   &amp;ndash; Chairback Mountain &amp;ndash; being &lt;b&gt;straight up&lt;/b&gt;.  People in Maine have
   clearly not heard of switchbacks, because there were none.  When I
   was getting very close to the shelter at Chairback Mountain, there
   was a large climb on talus (big rocks that are just sitting on each
   other with nothing to keep them from falling).  That&#39;s also not my
   favorite thing.
&lt;/p&gt;
&lt;p&gt;
   I had told myself that if I didn&#39;t get to the shelter by 3, then I
   would stay there.  I met an older man that was already staying at
   the shelter and asked him what time it was &amp;ndash; he said that it was
   after three, and I was quite relieved.  We talked for a while --
   his trail name was Frosty and had been on the trail for a day
   longer than me.  I was a bit proud of myself for passing someone
   already, but Frosty had taken a bit of a side trip.
&lt;/p&gt;
&lt;p&gt;
   I went to set up my hammock, and while I was doing that, I heard
   Picker and Grinner arrive.  They had stayed at the shelter before
   White Cap and we had not seen each other that day.  She asked
   Frosty if he&#39;d seen me, and when he pointed me out, Grinner came
   running over and gave me a big hug.  That was a huge help for me to
   have someone glad to see me at the end of what was my first really
   hard day on the trail.  It was just one of the reasons that I give
   a lot of credit for my success on the trail to Picker and Grinner.  
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;The rest &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;


&lt;p&gt;
   I stayed with Picker, Grinner, and Frosty for the rest of the
   100-mile wilderness.  There were more mountains and campsites, but
   nothing that stands out too vividly in my memory (though this
   &lt;a href=&quot;https://picasaweb.google.com/lh/photo/bUFnjNFdRFDtm2PT7cNbdnIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;waterfall&lt;/a&gt; is pretty nice).  Frosty turned out to be a great hiking
   companion as well.  His pack was lighter than everyone else&#39;s, so
   he had no problems keeping up, and he has a great sense of humor.
   He had planned a lot better than I had, and finished all the food
   in his pack by breakfast on the final day before we got to Monson.
   I think he had to eat turkey stuffing because he had eaten some
   breakfasts for supper on an earlier night.  Luckily, we were only a
   few miles from the road, so no one starved.  (That being said,
   everyone was talking about food at that point &amp;ndash; we were getting
   pretty hungry and all of us lost quite a bit of weight.)
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;Monson &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;


&lt;p&gt;
   We called Shaw&#39;s in Monson from the road and they came and picked
   us up.  It was great to get out of the wilderness.  The people at
   Shaw&#39;s were so nice and especially great at dealing with tired
   hikers.  They quickly got us into the showers and gave us a nice
   all-you-can-eat pancake breakfast.
&lt;/p&gt;
&lt;p&gt;
   I think I won&#39;t get into all that happened in Monson today, but
   leave that until the next installment of the saga, where we&#39;ll meet
   Wounded Knee.  Stay tuned.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/hiking/100-mile-wilderness/#comments</comments>

</item>
<item>

	<title>spot-tracks</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/spot-tracks/</guid>

	<link>http://chrismgray.github.com//posts/spot-tracks/</link>


	<category>clojurescript</category>

	<category>hiking</category>

	<category>spot</category>


	<pubDate>Wed, 16 Nov 2011 09:20:05 -0700</pubDate>
	<dcterms:modified>2011-11-16T16:20:05Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Where I was &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I finally have a Clojurescript application that works basically the
  way I want it to.  It shows a Google Map of the US onto which is
  added a series of markers.  The markers are placed at the positions
  that I sent a SPOT message on one of my hikes.  They are dropped at
  intervals that correspond to the intervals between me sending them
  out.  The whole thing takes a minute to watch.  There are a couple
  of parts where it seems like nothing is happening &amp;ndash; those are
  winter when I wasn&#39;t hiking and a period of time between when the
  SPOT stopped working and when I got the replacement.  The app is
  &lt;a href=&quot;http://chrismgray.github.com/posts/spot-tracks/view.html&quot;&gt;here&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/chrismgray/spot-tracks&quot;&gt;source code&lt;/a&gt; is on my github page, but it is mostly
  unedifying. 
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/spot-tracks/#comments</comments>

</item>
<item>

	<title>luhnybin</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/luhnybin/</guid>

	<link>http://chrismgray.github.com//posts/luhnybin/</link>


	<category>clojure</category>

	<category>programming-challenge</category>

	<category>thrush</category>


	<pubDate>Tue, 15 Nov 2011 13:22:19 -0700</pubDate>
	<dcterms:modified>2011-11-15T22:18:05Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Another programming challenge &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I woke up with another programming challenge in my inbox this
  morning.  This one is from &lt;a href=&quot;http://squareup.com&quot;&gt;Square&lt;/a&gt;.  They are a company that gives
  you a little device so that you can accept credit cards using a
  smart phone.  The challenge is &lt;a href=&quot;http://corner.squareup.com/2011/11/luhny-bin.html&quot;&gt;here&lt;/a&gt; &amp;ndash; basically it&#39;s about removing
  credit cards numbers from logs.  There are some details about what
  constitutes a credit card number, and how they are distinct from
  other numbers.  I won&#39;t repeat that here, but you should read it to
  understand what&#39;s coming up.
&lt;/p&gt;
&lt;p&gt;
  As usual, I implemented my solution in Clojure.  I particularly
  liked the function I called &lt;code&gt;luhn-check&lt;/code&gt;.  Here it is:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defn luhn-check
  &lt;span&gt;&quot;Takes a sequence of digits and determines whether they pass the Luhn test.&lt;/span&gt;
&lt;span&gt;   The sequence must be in order from right to left.&quot;&lt;/span&gt;
  [digits]
  (-&amp;gt;&amp;gt; digits
       (partition 2 2 (repeat 0))
       (mapcat #(vector (first %) (* 2 (second %))))
       (reduce #(+ %1 (int (/ %2 10)) (int (mod %2 10))))
       (#(mod % 10))
       (= 0)))
&lt;/pre&gt;




&lt;p&gt;
  I think this is a good illustration of the &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; operator in
  Clojure, which is also called the &quot;thrush&quot; operator.  Basically,
  this operator can be thought of as taking the result from one
  expression and putting it at the end of the next expression.
&lt;/p&gt;
&lt;p&gt;
  In this case, we start out with a list of digits.  We then partition
  them into pairs, padding with a zero if necessary.  We then take the
  pairs and double the second number in the pair, concatenating all
  the pairs back into a single list.  We then sum up all the digits in
  the list, using the &lt;code&gt;reduce&lt;/code&gt; function.  This leaves us with a
  number.  We get its value \(\mod 10\) and test whether it is equal
  to zero.  If it is, we return &lt;code&gt;true&lt;/code&gt;, otherwise we return &lt;code&gt;false&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  All of this could be written with nested expressions (and the thrush
  operator is simply a macro that rewrites what you see as nested
  expressions), but I think the way it is written nicely shows what
  the data is doing in the function.
&lt;/p&gt;
&lt;p&gt;
  Anyway, I don&#39;t know if this solution will get me a job, but it was
  a bit of fun coding and didn&#39;t take too long.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/luhnybin/#comments</comments>

</item>
<item>

	<title>scattered</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/scattered/</guid>

	<link>http://chrismgray.github.com//posts/scattered/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>email</category>

	<category>git</category>

	<category>git-annex</category>

	<category>notmuch</category>

	<category>spot</category>


	<pubDate>Mon, 14 Nov 2011 10:11:23 -0700</pubDate>
	<dcterms:modified>2011-11-14T18:14:04Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Scattered &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I am doing a bunch of things today, all fairly small.  I think it&#39;s
  because I finished working on the time series framework yesterday,
  so I&#39;m kind of at loose ends.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;New programming project &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  One thing that I would like to do is to take all the messages that I
  sent with my &lt;a href=&quot;http://findmespot.com&quot;&gt;SPOT&lt;/a&gt; device while hiking and make a small animation of
  them on Google Maps.  This would be another use of Clojurescript.
  My previous project &amp;ndash; a Clojurescript program for computing the
  Voronoi Diagram of a set of points input by a user &amp;ndash; is a bit
  stalled at the moment, so it&#39;s good to have something else to work
  on.  Also, I feel like adding points to a Google Map is something
  that Clojurescript is better suited to, rather than the fiddly
  numeric stuff that I was trying to make it do.  I will come back to
  the Voronoi Diagram at some point (hopefully fairly soon), but I am
  putting it on the back burner for the moment.
&lt;/p&gt;
&lt;p&gt;
  So far, I see two major tasks:
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Getting the coordinates and times of the SPOT messages &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;


&lt;p&gt;
   Every SPOT message is an email that contains the coordinates of
   where and when the message was sent.  Parsing the email can be done
   offline, so I will probably just use Clojure for that.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Putting them on the Google Map &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;


&lt;p&gt;
   The &lt;a href=&quot;http://code.google.com/apis/maps/documentation/javascript/overlays.html#Markers&quot;&gt;API&lt;/a&gt; for using Google Maps appears to be easy to use and
   well-thought-out.  There&#39;s even a way to drop the markers at
   different intervals &amp;ndash; just what I want to do.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Notmuch &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I am also playing with the &lt;a href=&quot;http://notmuch.org&quot;&gt;notmuch&lt;/a&gt; email client.  So far I quite
  like it.  It&#39;s a heck of a lot faster than my previous mail client,
  mainly because it doesn&#39;t do as much.  Like gmail, it is optimized
  towards two operations: searching and tagging.  I never really used
  tags in gmail, because doing so involves clicking around, but it&#39;s
  much faster in notmuch.  So far, this seems like the big advantage
  for notmuch.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Git annex &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  In an effort to use all the software written by &lt;a href=&quot;http://joey.kitenet.net/&quot;&gt;Joey Hess&lt;/a&gt; (not
  really, but it seems like it), I am also trying out &lt;a href=&quot;http://git-annex.branchable.com/&quot;&gt;git annex&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  So far, I have come up with one really compelling use case --
  syncing podcasts to my mp3 player.  My mp3 player has the problem
  that it will delete all the files on it at random times.  Thus, I
  need to keep a backup of all the files on it on my computer.
  However, when I am done listening to a podcast, I like to remove the
  file.  Hopefully, I will be able to sync the files that I remove
  myself (that is, remove them from the laptop), but not the files
  that get removed by the stupid thing crashing.
&lt;/p&gt;
&lt;p&gt;
  Another thing that I would like to do is put my music and video
  collections in git annex.  I&#39;m not sure that anything special would
  come from doing that, but it seems nice to have these things in
  version control.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/scattered/#comments</comments>

</item>
<item>

	<title>at-01</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/hiking/at-01/</guid>

	<link>http://chrismgray.github.com//posts/hiking/at-01/</link>


	<category>AT</category>

	<category>hiking</category>


	<pubDate>Sun, 13 Nov 2011 08:57:32 -0700</pubDate>
	<dcterms:modified>2011-11-13T16:05:46Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Starting on the Appalachian Trail &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  This is my first post about hiking, so I think it should be about my
  first days really hiking.  That would be July 1 and 2, 2010.  It
  already seems like an eternity ago, so much has happened since
  then.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;July 1 &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  I had been at a conference in Quebec City in the days leading up to
  July 1.  It had gone well and I had given a talk that I thought was
  pretty well-received.  But more important for me on that day was
  that I had gone to &lt;a href=&quot;http://mec.ca&quot;&gt;MEC&lt;/a&gt; and bought a bunch of backpacking gear.  In
  fact, I had mailed all my possessions home from Germany to Calgary
  the week before, so I was really planning to live on the trail.  I
  had no alternative.
&lt;/p&gt;
&lt;p&gt;
  I shaved one last time before my trip, took my new gear, and walked
  to the rental-car agency.  I had booked a car the day before and
  knew it would be open, even though it was Canada Day.  The drive
  from Quebec to Maine was long and pretty boring.  The only
  slightly-eventful thing that happened was that the border guards
  really gave me a hard time, eventually saying something like &quot;Well,
  we have to let him in, he&#39;s a citizen.&quot;  I guess they don&#39;t have
  much to do at that particular crossing, so they make the most of it
  when they get someone with even a slightly strange story.
&lt;/p&gt;
&lt;p&gt;
  I arrived in Bangor, Maine and needed to do some food shopping.  I
  knew that I had the dreaded 100-mile wilderness ahead of me, meaning
  that I might not get to a store for 10 days.  The stuff I bought
  then seems rather comical now.  I had a pound of rice and four or
  five Indian meals that were not dehydrated.  Also a full jar of
  peanut butter and a full jar of jelly.  And two different kinds of
  non-dehydrated hummus.  I&#39;m pretty sure it all fit into my
  food bag eventually, but it took some doing.
&lt;/p&gt;
&lt;p&gt;
  I returned the car at the airport and then took the airport bus from
  the airport to the bus terminal.  It turned out that the bus
  terminal was walking distance from the rental-car agency, but I
  didn&#39;t find that out until I was already on the bus.
&lt;/p&gt;
&lt;p&gt;
  I got to the bus terminal and asked for a ticket to Millinocket.  It
  turned out that I wasn&#39;t the first to do that on that day: two other
  people were already there that were going to the trailhead.  They
  would become known to me as Picker and Grinner, and I would walk
  with them for about 1000 miles.  They obviously knew what they were
  doing.  They had sent their food ahead to the Inn at Millinocket and
  had booked a ride there.  Grinner had also already hiked the trail,
  so I was sure that I was safe tagging along with them.
&lt;/p&gt;
&lt;p&gt;
  At the inn, I met a couple more people that were starting the same
  day as me: Oblio and his dad.  We had a beer at the bar down the
  street and discussed the trail ahead.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;July 2 &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  After a night of pretty poor sleep (I was excited and there were
  snorers), we got up bright and early at 5:30 the next morning.  The
  inn came with a deal that you get breakfast at the diner, so I met
  up with Oblio and his dad, and we came up with trail names for
  ourselves. Since I had been doing my postdoc in Computational
  Geometry just before the trail, I became known as Dr. Geo.  Oblio&#39;s
  dad was in marketing, and assured me that this was a fine name.
&lt;/p&gt;
&lt;p&gt;
  We piled into the innkeeper&#39;s truck and headed for the trail.  The
  first task of a southbound AT thru-hike is to climb Mount Katahdin.
  In fact, the climb doesn&#39;t even count, because the trail starts at
  the top.  Since we would be coming back, we left our full packs at
  the Baxter Park ranger station, and took the loaner day-packs that
  they provide.  That would be the only time that I hiked without my
  full pack over the next 4500 miles.
&lt;/p&gt;
&lt;p&gt;
  It was a good thing that we had light packs, because Katahdin is a
  monster.  It is probably the most technical climbing on the trail,
  requiring you to pull yourself up with your hands at many points.
  However, the &lt;a href=&quot;https://picasaweb.google.com/lh/photo/xaCB5S_gJwWabCsdMwPVU3IQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;views&lt;/a&gt; are great.  At some points, you &lt;a href=&quot;https://picasaweb.google.com/lh/photo/om0LnphpOAtHNxIX9QwkqHIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;feel&lt;/a&gt; like you are
  in an &lt;a href=&quot;https://picasaweb.google.com/lh/photo/8rHwtx0OcApK-34CYXmkM3IQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;airplane&lt;/a&gt;, you can see so far.  There are even great &lt;a href=&quot;https://picasaweb.google.com/lh/photo/ig4QqEE10V3TTXk9BfL9TXIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;waterfalls&lt;/a&gt;
  near the base.  I know some people bathed in the pools beneath the
  falls, but the water was far too cold for me.  However, I did get my
  &lt;a href=&quot;https://picasaweb.google.com/lh/photo/betCZRWpaGuJGmFtjulKJnIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;picture&lt;/a&gt; taken at the summit so that I could prove that I had started
  the trail.
&lt;/p&gt;
&lt;p&gt;
  We started our hike from the summit back down the mountain.  It was
  even harder going down than going up.  When we got to the bottom,
  everyone was pretty tired.  Especially for the first day of hiking,
  Katahdin is really hard.  We made our camp at Baxter Park.  Of
  course, I was very poorly organized and hadn&#39;t realized that you
  must book a campsite there, so I shared with Oblio and his dad.
&lt;/p&gt;
&lt;p&gt;
  It was a night of firsts for me.  I hadn&#39;t lit my stove before.  It
  didn&#39;t want to work with my flint, so I had to borrow a lighter.  I
  hadn&#39;t used a water filter before, so I needed to do that for the
  first time as well.  Cooking outside was also a new experience, and
  I undercooked the rice pretty woefully.  But after a hard day of
  hiking, any warm food is pretty good.  After that, I set up my
  brand-new hammock for the first time and climbed into my brand-new
  sleeping bag.  The hammock sagged so much that my bum almost touched
  the ground, but I didn&#39;t care &amp;ndash; I was in bed and my journey had
  started.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/hiking/at-01/#comments</comments>

</item>
<item>

	<title>time-series-2</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/time-series-2/</guid>

	<link>http://chrismgray.github.com//posts/time-series-2/</link>


	<category>clojure</category>

	<category>programming-challenge</category>

	<category>time-series</category>


	<pubDate>Sun, 13 Nov 2011 07:12:16 -0700</pubDate>
	<dcterms:modified>2011-11-15T20:22:53Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;What we have so far &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Well, yesterday was either a very productive day or a very lucky day
  for me.  I read up on monads &amp;ndash; I found that &lt;a href=&quot;http://onclojure.com/2009/03/05/a-monad-tutorial-for-clojure-programmers-part-1/&quot;&gt;khinsen&#39;s tutorials&lt;/a&gt; and
  &lt;a href=&quot;http://intensivesystems.s3-website-us-east-1.amazonaws.com/tutorials/monads_101.html&quot;&gt;Jim Duey&#39;s tutorials&lt;/a&gt; complemented each other nicely.  Then I went
  for a long run (about 18 miles I think) and let the ideas sink in.
  When I got home, I found &lt;code&gt;state-m&lt;/code&gt; and &lt;code&gt;m-seq&lt;/code&gt; and the job was
  almost done.
&lt;/p&gt;
&lt;p&gt;
  Just as a reminder, &lt;a href=&quot;http://chrismgray.github.com/posts/time-series-1&quot;&gt;yesterday&#39;s task&lt;/a&gt; was to build a time-series
  framework where a function \(f\) accepts the previous \(n\) outputs of
  \(f\) as input to generate a new output.  Here is my solution, edited
  for clarity (the actual solution is in a &lt;a href=&quot;http://github.com/chrismgray/time-series&quot;&gt;github repository&lt;/a&gt;):
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defn time-series [f init-state n num-iterations]
 (let [call-f (fn [state]
                (let [retval (f state)
                      num (count state)
                      new-state (vec (if (= num n) (drop 1 (conj state retval)) (conj state retval)))]
                  [retval new-state]))]
   ((with-monad state-m
      (m-seq (repeat num-iterations call-f)))
    (vector init-state))))
&lt;/pre&gt;




&lt;p&gt;
  As you can see, the heavy lifting is done by the &lt;code&gt;state&lt;/code&gt; monad and
  by &lt;code&gt;m-seq&lt;/code&gt;.  What do they do?  Well, &lt;code&gt;m-seq&lt;/code&gt; can be thought of as
  taking a list of functions and calling them in order, returning a
  list of their return values.  The list of functions in this case is
  the same function (&lt;code&gt;call-f&lt;/code&gt;) over and over.  All &lt;code&gt;call-f&lt;/code&gt; does is
  call \(f\) and change the state.
&lt;/p&gt;
&lt;p&gt;
  It might appear that &lt;code&gt;call-f&lt;/code&gt; is an \(O(n)\) function.  After all, we
  call &lt;code&gt;count&lt;/code&gt; on the state, which is a vector of at most \(n\)
  elements.  However, almost all the behind-the-scenes data structures
  that Clojure uses (including the vector data structure) are
  guaranteed to have \(O(1)\) performance for calling &lt;code&gt;count&lt;/code&gt;.  So
  that&#39;s nice, and &lt;code&gt;call-f&lt;/code&gt; has the performance characteristics that I
  desired.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Monads &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  They&#39;re still a slightly confusing and magical-seeming thing to me,
  but monads have some obvious utility.  I guess the way to think
  about them is that if you put your input and output in a common
  format, then they aid you in stringing functions together very
  easily.  I used them in this case to encapsulate state, and that is
  probably the most common use of them in Clojure (judging by the
  number of state functions in the Clojure monads library).  However,
  I think I should probably try to understand all the monads in the
  library and know how to combine them.
&lt;/p&gt;
&lt;p&gt;
  I could have written the function above without monads, but the code
  would not have been nearly as concise, and there probably would have
  been many more edge-cases to consider.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;The rest &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I also wrote some stuff to make debugging easier, and used incanter
  to compare multiple time series.  However, neither required me to
  bend my brain as much as monads, so I won&#39;t talk about them very
  much.  In fact, not at all, because that is the end of my post.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/time-series-2/#comments</comments>

</item>
<item>

	<title>time-series-1</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/time-series-1/</guid>

	<link>http://chrismgray.github.com//posts/time-series-1/</link>


	<category>clojure</category>

	<category>programming-challenge</category>

	<category>time-series</category>


	<pubDate>Sat, 12 Nov 2011 09:27:15 -0700</pubDate>
	<dcterms:modified>2011-11-15T20:22:37Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Programming challenges &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  One of the interesting aspects of looking for a job this time around
  is that most of the companies that I have applied at have asked me
  to do a programming challenge as a kind of weed-out step.  It has
  been fun and a good way of keeping in practice.  In fact, I have
  resolved to learn at least one new feature of the programming
  language that I am using for each one.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Time series framework &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  My latest programming challenge is to build a framework for &lt;a href=&quot;http://en.wikipedia.org/wiki/Time_series&quot;&gt;time series&lt;/a&gt; generation.  The framework will take a function \(f\) that
  looks at the \(n\) previous timesteps and returns the next timestep.
  The other goals are:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Efficiency

&lt;p&gt;    
    Adding a new timestep should be a \(O(1)\) operation.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Ease of debugging

&lt;p&gt;    
    If an error occurs in computing the next timestep, the stack trace
    should be easily comprehensible and show the current state of the
    time series.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Traceability

&lt;p&gt;    
    It should be possible to see the differences between two different
    functions.  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Ideas so far &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  This seems like the perfect time to learn about &lt;a href=&quot;http://onclojure.com/2009/03/05/a-monad-tutorial-for-clojure-programmers-part-1/&quot;&gt;monads&lt;/a&gt;.  Yikes!
  I&#39;ve tried before, but have never seen a practical use for them.  As
  far as I understand so far, they should be very good for storing the
  state (&lt;i&gt;i.e.&lt;/i&gt; the previous \(n\) timesteps).
&lt;/p&gt;
&lt;p&gt;
  A simpler solution might be just to use lazy sequences.  There&#39;s not
  much to such a solution, so I might just implement it first and then
  try to replicate it with monads.  In this solution, the previous \(n\)
  timesteps are simply the last \(n\) elements of the lazy sequence.
  Getting those elements might be tough to do in constant time, but I
  have a feeling it&#39;s possible.
&lt;/p&gt;
&lt;p&gt;
  On the debugging front, there shouldn&#39;t be too much complexity: it
  should just be a combination of &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;throw&lt;/code&gt;.
  There&#39;s also &lt;code&gt;clojure.stacktrace&lt;/code&gt; if I want to get even fancier.
&lt;/p&gt;
&lt;p&gt;
  As far as tracing goes, I might have a look at &lt;code&gt;tools.trace&lt;/code&gt; to see
  if there&#39;s anything interesting there that I can use.  I think that
  monads might provide another way of doing the same thing.  We&#39;ll see
  which is simpler.  It might also be nice to use &lt;a href=&quot;http://incanter.org&quot;&gt;incanter&lt;/a&gt; to display
  the differences between two (or more) different functions.
&lt;/p&gt;
&lt;p&gt;
  On to the coding!
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/time-series-1/#comments</comments>

</item>
<item>

	<title>cljs-name-resolving-2</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/cljs-name-resolving-2/</guid>

	<link>http://chrismgray.github.com//posts/cljs-name-resolving-2/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>rationals</category>


	<pubDate>Fri, 11 Nov 2011 18:07:52 -0700</pubDate>
	<dcterms:modified>2011-11-12T01:28:40Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Done! &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I was close with my guess in the last post.  What ended up working
  was
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(let [name (munge (symbol (str (-&amp;gt; env :ns :name) &lt;span&gt;&quot;.&quot;&lt;/span&gt; (munge (str sym)))))
&lt;/pre&gt;




&lt;p&gt;
  For some reason, &lt;code&gt;(name sym)&lt;/code&gt; would crash the compiler from the
  &lt;code&gt;parse&lt;/code&gt; method but it wouldn&#39;t from other functions caled from the
  &lt;code&gt;parse&lt;/code&gt; method.  I finally gave up worrying about that and just used
  &lt;code&gt;(str sym)&lt;/code&gt; instead, since that is guaranteed to be the same in this
  case &amp;ndash; there is an &lt;code&gt;(assert (not (namespace sym)))&lt;/code&gt; just before the
  &lt;code&gt;let&lt;/code&gt; line.  I gave up on worrying about it, but someone who knows
  more about the compiler than me might want to try to figure out why
  it is.
&lt;/p&gt;
&lt;p&gt;
  I also needed to allow names defined in &lt;code&gt;cljs.core&lt;/code&gt; but redefined in
  another namespace to be called or referred to.  This involved
  changing the &lt;code&gt;resolve-existing-var&lt;/code&gt; function.  Again, &lt;code&gt;cljs.core&lt;/code&gt; is
  hardcoded:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(let [full-ns (if (and (core-name? env sym) (nil? (get-in @namespaces [(-&amp;gt; env :ns :name) :defs sym])))
                &#39;cljs.core
                (-&amp;gt; env :ns :name))]
&lt;/pre&gt;




&lt;p&gt;
  I added the second test: it simply asks whether the variable has
  been defined in the namespace.  If it hasn&#39;t, and the variable is
  defined in &lt;code&gt;cljs.core&lt;/code&gt;, only then is the namespace set to
  &lt;code&gt;cljs.core&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Remove the macros &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  It was also necessary to remove many of the macros from &lt;code&gt;core.clj&lt;/code&gt;
  in order to redefine the functions that I needed to in my project.
  As I noted earlier, my project is to implement rationals in
  Clojurescript, so I need to redefine most of the functions that work
  with numbers.  (At least, that is the way I am implementing it --
  there may be a better way that I don&#39;t know about.)  Many of these
  functions were implemented twice: once as a macro in &lt;code&gt;core.clj&lt;/code&gt; and
  once as a function in &lt;code&gt;core.cljs&lt;/code&gt;.  I am obviously biased towards
  being able to redefine these functions, so I think the macros should
  be removed, but at least one of the implementations is redundant.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/cljs-name-resolving-2/#comments</comments>

</item>
<item>

	<title>cljs-name-resolving</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/cljs-name-resolving/</guid>

	<link>http://chrismgray.github.com//posts/cljs-name-resolving/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>rationals</category>


	<pubDate>Fri, 11 Nov 2011 07:23:38 -0700</pubDate>
	<dcterms:modified>2011-11-12T01:25:21Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Resolving names as they are compiled in Clojurescript &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I think I found the bug in the Clojurescript compiler that I was
  &lt;a href=&quot;http://chrismgray.github.com/more-rationals&quot;&gt;looking for yesterday&lt;/a&gt;.  Just to refresh the memory, when defining a
  function that has a function of the same name in &lt;code&gt;cljs.core&lt;/code&gt;, the
  compiler will assume that you are trying to redefine the function
  from &lt;code&gt;cljs.core&lt;/code&gt;, rather than the function in the namespace that you
  are actually in.  Since I am trying to redefine functions like &lt;code&gt;/&lt;/code&gt;
  and &lt;code&gt;*&lt;/code&gt;, this is a problem.
&lt;/p&gt;
&lt;p&gt;
  Let&#39;s look at the evidence.  First, there&#39;s this:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defmethod parse &#39;def
  [op env form name]
  (let [pfn (fn ([_ sym] {:sym sym})
              ([_ sym init] {:sym sym :init init})
              ([_ sym doc init] {:sym sym :doc doc :init init}))
        args (apply pfn form)
        sym (:sym args)]
    (assert (not (namespace sym)) &lt;span&gt;&quot;Can&#39;t def ns-qualified name&quot;&lt;/span&gt;)
    (let [name (munge (:name (resolve-var (dissoc env :locals) sym)))
&lt;/pre&gt;




&lt;p&gt;
  The important line there is the last: when defining a new name,
  &lt;code&gt;resolve-var&lt;/code&gt; is called on the symbol.  Let&#39;s have a look at that
  function.  There is a &lt;code&gt;cond&lt;/code&gt;, and when none of the tests return
  true, the following is done:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(munge (symbol (str
                (if (core-name? env sym)
                  &#39;cljs.core
                  (-&amp;gt; env :ns :name))
                &lt;span&gt;&quot;.&quot;&lt;/span&gt; (munge (name sym))))))]
&lt;/pre&gt;




&lt;p&gt;
  This is seeing if the symbol name is in &lt;code&gt;cljs.core&lt;/code&gt;, and if it is
  setting the namespace of the symbol to &lt;code&gt;cljs.core&lt;/code&gt;.  Normally that
  would be correct &amp;ndash; one doesn&#39;t want to need to &lt;code&gt;use&lt;/code&gt; &lt;code&gt;cljs.core&lt;/code&gt; in
  every file &amp;ndash; but it doesn&#39;t allow for redefinition of functions
  that are in &lt;code&gt;cljs.core&lt;/code&gt; (at least without completely shadowing
  them).
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;What to do &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  So what can we do about this?  The first thing that seems odd to me
  is that the symbol being defined is being resolved first.  Every
  symbol that is defined is defined within its own namespace, so there
  should be no need to resolve it.  That suggests that we should be
  able to take the part of &lt;code&gt;resolve-var&lt;/code&gt; that doesn&#39;t have a special
  case for &lt;code&gt;cljs.core&lt;/code&gt; and put it into the &lt;code&gt;parse&lt;/code&gt; method.  Something
  like
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(let [name (munge (:name (symbol (str (-&amp;gt; env :ns :name) &lt;span&gt;&quot;.&quot;&lt;/span&gt; (munge (name sym))))))])
&lt;/pre&gt;




&lt;p&gt;
  might work in the &lt;code&gt;parse&lt;/code&gt; method.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/cljs-name-resolving/#comments</comments>

</item>
<item>

	<title>blogging-about-blogging</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/blogging-about-blogging/</guid>

	<link>http://chrismgray.github.com//posts/blogging-about-blogging/</link>


	<category>blogging</category>

	<category>emacs</category>

	<category>git</category>

	<category>hiking</category>

	<category>ikiwiki</category>

	<category>org-mode</category>


	<pubDate>Thu, 10 Nov 2011 19:13:21 -0700</pubDate>
	<dcterms:modified>2011-11-11T02:13:21Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;A new system &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  This is the obligatory post about how the new blogging system
  works.  Isn&#39;t that exciting?
&lt;/p&gt;
&lt;p&gt;
  By my standards, this is a fairly simple system.  It is based on
  &lt;a href=&quot;http://ikiwiki.info&quot;&gt;ikiwiki&lt;/a&gt;, which allows me to use &lt;a href=&quot;http://orgmode&quot;&gt;org-mode&lt;/a&gt; to edit my posts and &lt;a href=&quot;http://git-scm.com&quot;&gt;git&lt;/a&gt; as
  the version control system.  Since I already know those tools, I
  don&#39;t have to think about them and can just focus on writing.
&lt;/p&gt;
&lt;p&gt;
  I&#39;m less comfortable with making web pages look nice, but I took the
  CSS file from &lt;a href=&quot;https://github.com/AntPortal/ikiwiked/raw/master/theme/gray-orange/local.css&quot;&gt;the nice people at antportal.com&lt;/a&gt; and added my own
  panoramic photo that I took while hiking.  I think the output is
  simple and looks pretty good.
&lt;/p&gt;
&lt;p&gt;
  Finally, I am currently hosting the pages on &lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;What I intend to write about &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  The blog is currently called &quot;Hiking and Coding&quot;.  So far I&#39;ve only
  written about the latter, but I&#39;m planning some posts about the
  former.  My current objective is to write once a day as a way to
  solidify what I&#39;m thinking about for the day, so my posts will
  likely be about what I&#39;m working on.  As such, expect them to be
  really boring.  I&#39;m okay with that.  I&#39;m also okay with you not
  subscribing.
&lt;/p&gt;
&lt;p&gt;
  I will try to write about adventures I had while hiking on days that
  I&#39;m not really working on anything.  Those posts will be tagged with
  the hiking tag.  They might be more exciting (though they might
  not).
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/blogging-about-blogging/#comments</comments>

</item>

</channel>
</rss>
