<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>Hiking and Coding</title>
<link href="http://chrismgray.github.com//"/>
<link href="http://chrismgray.github.com//index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Hiking and Coding</name>

</author>




<id>http://chrismgray.github.com//</id>

<subtitle type="html">Hiking and Coding</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20111107">ikiwiki</generator>
<updated>2012-01-05T01:02:45Z</updated>
<entry>
	<title>North New Hampshire</title>

	<id>http://chrismgray.github.com//posts/hiking/new-hampshire-1/</id>

	<link href="http://chrismgray.github.com//posts/hiking/new-hampshire-1/"/>






	<category term="at" />

	<category term="hiking" />


	<updated>2012-01-05T01:02:45Z</updated>
	<published>2012-01-05T01:02:45Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;The Whites &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  As a southbound hiker on the Appalachian Trail, you hear about the
  White Mountains from nearly the first day.  They are reputed to be
  the Real Test &amp;ndash; if you can make it past them, you can do anything.
  However, once you get to them, you have made it past &lt;a href=&quot;http://chrismgray.github.com//./posts/hiking/southern-maine&quot;&gt;Southern Maine&lt;/a&gt;,
  and you know you can do anything anyway.
&lt;/p&gt;
&lt;p&gt;
  To be honest, though, the Whites are a real challenge, and present a
  few peculiarities when compared with the rest of the trail.  First,
  there are real buildings (unlike the shelters on the rest of the
  trail which generally only have 3 walls).  These are known as
  &quot;huts&quot;, but they&#39;re pretty nice.  Thru-hikers are allowed to stay at
  them if they do a night&#39;s work, but they cost about $100 per night
  for everyone else.  Also, there are many areas where camping is
  strictly forbidden, or where there is a fee to camp.  This seemed a
  bit of a hassle, given the fact that I had been sleeping pretty much
  wherever I wanted for the past month.  However, it&#39;s a high-use
  area, so I can understand the reasons behind the restrictions.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Leaving Gorham &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  Picker, Grinner, and I spent a nice day-and-a-half in Gorham despite
  a rather funny meal at a Mexican (perhaps that needs scare quotes)
  restaurant.  &quot;What kind of beers do you have?&quot;  &quot;Oh lots, just name
  one.&quot;  &quot;Okay, I&#39;ll have a Long Trail.&quot;  &quot;I don&#39;t think we have
  that.&quot;  &quot;How about a Dos Equis?&quot; &quot;Nope.&quot; &quot;Maybe you should tell us
  what you have.&quot;  &quot;We have Bud, Miller, and Miller Light.&quot;  &quot;I think
  I&#39;ll stick with water.&quot;  And it went downhill from there.
&lt;/p&gt;
&lt;p&gt;
  The first two miles out of Gorham have beautiful pine trees and a
  really easy grade.  They are probably the easiest two miles in New
  Hampshire.  After this, we started going straight up again until we
  finally got over Mount Moriah.
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh4.googleusercontent.com/-fcAHof8WGPI/TOXAA_XLE2I/AAAAAAAAAlA/RlqDwELfFW0/s800/DSCF0109.JPG&quot;  alt=&quot;https://lh4.googleusercontent.com/-fcAHof8WGPI/TOXAA_XLE2I/AAAAAAAAAlA/RlqDwELfFW0/s800/DSCF0109.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  We got to a really nice shelter right at lunch time, and to my
  surprise Grinner wanted to stop for the day.  I really wanted to go
  on, so after an hour of discussing the situation, I decided to go on
  by myself.  I was a little scared because I had been with Picker and
  Grinner the whole way to that point, but I also knew that it might
  be a good idea, since I could be sure that I was going my own pace
  and not hurrying to stay up with them.
&lt;/p&gt;
&lt;p&gt;
  I walked about 5 more miles, not finding a camp spot (which was the
  reason that Grinner had wanted to stop), before finding a place to
  camp that was just outside the first big no-camping zone.
&lt;/p&gt;
&lt;p&gt;
  The next morning was up and over Carter Dome and then down to Carter
  Notch Hut.  This was the first hut that I encountered, and gave me a
  good first impression of the huts.  The croo (as the workers at the
  hut are known) was extremely welcoming and when they found out that
  I was a thru-hiker gave me some left-overs from the morning&#39;s
  breakfast.
&lt;/p&gt;
&lt;p&gt;
  After my short stop, I pushed on, up the Wildcat Ridge.  This is a
  short mountain range with a ski area on one of the mountains.  I
  stopped at a gondola and did a little people-watching while I ate
  lunch.  After lunch, it was time for a knee-busting descent down to
  Pinkham Notch, which has a nice little interpretive center, where I
  think I got an ice-cream sandwich.  (Thinking back on this, I guess
  I was getting plenty of food in this section of the hike).
&lt;/p&gt;
&lt;p&gt;
  The next four miles after Pinkham Notch were not too hard, but it
  was getting a bit late by the time I got to my final destination of
  the day &amp;ndash; Osgood Tent Site.  Bears are apparently a problem at this
  particular camp spot, so it was nice that they provided bear boxes
  to store our food.  
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Mounts Madison and Washington &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  The climb from Osgood Tent Site the next morning is one of the
  longest and steepest on the trail.  The trail climbs 2866 feet over
  2.8 miles &amp;ndash; a 20% grade that just goes on and on.  Normally, when I
  got above tree line I was really happy because that meant that the
  climb was nearly over.  On this climb, it lasted for at least
  another hour.  I was lucky with the weather, though, and got some
  nice pictures.  Here is one of Mt. Washington, as seen from
  Mt. Madison.
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh6.googleusercontent.com/-WWUwef9kwv8/TOXABgBmiII/AAAAAAAAAlM/h8NTmohWZ_E/s800/DSCF0110.JPG&quot;  alt=&quot;https://lh6.googleusercontent.com/-WWUwef9kwv8/TOXABgBmiII/AAAAAAAAAlM/h8NTmohWZ_E/s800/DSCF0110.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  You can see the cloud on top of Mt. Washington (as well as the road
  up it).  That is a nearly-permanent feature of the place that
  advertises itself as having the worst weather on Earth.
&lt;/p&gt;
&lt;p&gt;
  Here is a picture that is a bit more representative of the trail
  going up Mt. Madison: 
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh5.googleusercontent.com/-Iur5kQyy8yo/TOXAFEFvQvI/AAAAAAAAAmA/9owJuOEwmh0/s800/DSCF0115.JPG&quot;  alt=&quot;https://lh5.googleusercontent.com/-Iur5kQyy8yo/TOXAFEFvQvI/AAAAAAAAAmA/9owJuOEwmh0/s800/DSCF0115.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  It is all large granite rocks, and the trail is marked by cairns.
&lt;/p&gt;
&lt;p&gt;
  By the time I had gotten to the top, I was really pretty tired, and
  I&#39;d only been going for a couple of hours.  Plus, the wind was
  beating fairly fiercely.
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh6.googleusercontent.com/-a6mx1BhBkcM/TOXAHkMGwnI/AAAAAAAAAmo/SK1dESLoYSU/s800/DSCF0119.JPG&quot;  alt=&quot;https://lh6.googleusercontent.com/-a6mx1BhBkcM/TOXAHkMGwnI/AAAAAAAAAmo/SK1dESLoYSU/s800/DSCF0119.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  I descended to the hut and warmed myself up a bit, but was soon out
  the door, because I had a goal that was on the other side of
  Mt. Washington.
&lt;/p&gt;
&lt;p&gt;
  My afternoon that day was spent navigating large rocks and asking
  northbounders about the best method for getting work-for-stay at the
  hut that was just past Washington.  The majority opinion was that
  the best method would be to hang out at the top of Mt. Washington
  until an hour before dark because the croo would not turn away a
  hiker into the dark.
&lt;/p&gt;
&lt;p&gt;
  Before I got to Mt. Washington, I had to cross the railroad (for
  tourists only) that goes to the top.  You can just see it in this
  picture:
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh4.googleusercontent.com/-uLJy3SMRqPs/TOXAKk9oLhI/AAAAAAAAAnI/h3r4zQThVtg/s800/DSCF0123.JPG&quot;  alt=&quot;https://lh4.googleusercontent.com/-uLJy3SMRqPs/TOXAKk9oLhI/AAAAAAAAAnI/h3r4zQThVtg/s800/DSCF0123.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  But I eventually made it to the top.  There were plenty of people
  who had ridden up in cars or the aforementioned railroad who would
  take my picture with the summit sign.
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh5.googleusercontent.com/-m_h-mr1VN-8/TOXAMP1DYnI/AAAAAAAAAnU/57AVGS9d5XQ/s144/DSCF0124.JPG&quot;  alt=&quot;https://lh5.googleusercontent.com/-m_h-mr1VN-8/TOXAMP1DYnI/AAAAAAAAAnU/57AVGS9d5XQ/s144/DSCF0124.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  The top of Mt. Washington is a fairly strange place.  It is a major
  tourist attraction, and has a large snack bar, gift shop, and post
  office, but it also has a major weather station measuring just how
  bad the weather can get.  Every now and then, someone dies because
  they venture out on a hike without the proper gear.
&lt;/p&gt;
&lt;p&gt;
  However, I was safe and sound at the top and hanging out at the gift
  shop until it was late enough to go to the hut.  I met up with a guy
  I had seen in Gorham, who had the trail name Bar Man.  He was a bit
  out of place in the hiking community &amp;ndash; older than the average hiker
  and far less outdoorsy.  In the time that we were talking, it
  emerged that he had only hiked from Osgood Tent Site to Madison hut
  the day before.  Since I had done that hike in the morning, I was
  less than impressed.
&lt;/p&gt;
&lt;p&gt;
  We walked down to the hut, with the lyrical name &quot;Lakes of the
  Clouds&quot; just before sunset.  There were many other hikers that had
  already arrived, but as predicted, they took us in since darkness
  was falling.  That evening, Bar Man made a nearly complete ass of
  himself.  He was completely rude during supper, complaining about
  everything, despite the fact that we were staying and eating for
  free at a place where others were paying quite good money to stay.
  He did as little work as possible, and relentlessly hit on the
  pretty northbound hikers.  I made up my mind to get up early and
  leave him behind.
&lt;/p&gt;
&lt;p&gt;
  After sleeping on the dinner tables of the hut, I was very glad to
  get up early.  It turned out to be a lucky decision, because clouds
  had dropped beneath us, and the views were great.
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh3.googleusercontent.com/-ZgtPpRYJ_d0/TOXANgbnvpI/AAAAAAAAAns/-u3qVQn_Bxo/s800/DSCF0126.JPG&quot;  alt=&quot;https://lh3.googleusercontent.com/-ZgtPpRYJ_d0/TOXANgbnvpI/AAAAAAAAAns/-u3qVQn_Bxo/s800/DSCF0126.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh4.googleusercontent.com/-yqKtaisyjqc/TOXASps4RrI/AAAAAAAAAoM/gBwx095WTrc/s800/DSCF0130.JPG&quot;  alt=&quot;https://lh4.googleusercontent.com/-yqKtaisyjqc/TOXASps4RrI/AAAAAAAAAoM/gBwx095WTrc/s800/DSCF0130.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh4.googleusercontent.com/-yqKtaisyjqc/TOXASps4RrI/AAAAAAAAAoM/gBwx095WTrc/s800/DSCF0130.JPG&quot;  alt=&quot;https://lh4.googleusercontent.com/-yqKtaisyjqc/TOXASps4RrI/AAAAAAAAAoM/gBwx095WTrc/s800/DSCF0130.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  The path from Mt. Washington was relatively easy &amp;ndash; I could have
  easily made it to the next hut the day before &amp;ndash; but before long, it
  got hard again.  During a moment of lack of focus between
  Mt. Jackson and Mt. Webster, I had my trekking pole slip on a rock,
  and I fell flat on face.  It was a good reminder to keep my
  concentration up.
&lt;/p&gt;
&lt;p&gt;
  After a descent into another notch, I ascended back to nearly the
  same elevation, and made my way to Ethan Pond.  The caretaker at the
  campsite was a really nice guy and waived the fee for me as a
  thru-hiker.  He also told me that the camp site where I had set up
  my hammock was a favorite place for a local moose.  I didn&#39;t see the
  moose, but I did get a nice picture of the lake.
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh4.googleusercontent.com/-K-U4fnWnc0g/TOXAUy2PzlI/AAAAAAAAAos/9hmdqsxNM6g/s800/DSCF0133.JPG&quot;  alt=&quot;https://lh4.googleusercontent.com/-K-U4fnWnc0g/TOXAUy2PzlI/AAAAAAAAAos/9hmdqsxNM6g/s800/DSCF0133.JPG&quot; /&gt;
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Wrapup &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  This post is getting a bit long, so I&#39;ll save the southern half of
  New Hampshire until next the next post.  In it, I nearly get
  arrested, finally finish with the Whites, and rub shoulders with the
  blue-bloods at Dartmouth.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/hiking/new-hampshire-1/#comments" type="text/html" />


	<link rel="comments" href="/posts/hiking/new-hampshire-1/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Southern Maine</title>

	<id>http://chrismgray.github.com//posts/hiking/southern-maine/</id>

	<link href="http://chrismgray.github.com//posts/hiking/southern-maine/"/>






	<category term="AT" />

	<category term="hiking" />


	<updated>2011-12-19T01:07:04Z</updated>
	<published>2011-12-19T00:44:34Z</published>

	<content type="html" xml:lang="en">
	
&lt;p&gt;When I last &lt;a href=&quot;http://chrismgray.github.com//./posts/hiking/mid-maine&quot;&gt;left off&lt;/a&gt; the story of my &lt;a href=&quot;http://chrismgray.github.com//./tags/AT&quot;&gt;Appalachian Trail&lt;/a&gt; hike, I was in
Stratton with Picker and Grinner.  We left Stratton and almost
immediately I could tell that my new hiking shoes were going to bother
me.  They had a harder sole than I was accustomed to, and so my calf
muscles were feeling some pressure.
&lt;/p&gt;
&lt;p&gt;
We made it to the top of North Crocker Mountain and met up with
Wounded Knee again.  He was as socially awkward as ever, and I don&#39;t
remember much of the rest of the day until we met him again at the
end.  I was limping because of the pain in my calves, and Wounded Knee
made some remark about how fast a hiker he was, considering that he
had beaten me to the camp site.
&lt;/p&gt;
&lt;p&gt;
The next day, my calves were even more sore.  It was also raining for
much of the day.  We stopped for a long break about 10 miles into the
day so that we could dry off and avoid the rain for a while.
After the rain had stopped, we climbed Saddleback Junior and went on
to a brand new campsite just past the summit.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Saddleback &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Some of the nicest views in Southern Maine came on the next day.
  Rather early in the morning, I caught this photo:
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh3.googleusercontent.com/-xpDuqdqRE-o/TOW_u4MaR6I/AAAAAAAAAg8/Gfq875Iod00/s400/DSCF0078.JPG&quot;  alt=&quot;https://lh3.googleusercontent.com/-xpDuqdqRE-o/TOW_u4MaR6I/AAAAAAAAAg8/Gfq875Iod00/s400/DSCF0078.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  We were glad that we had waited until after the rain had stopped to
  climb Saddleback, which I think is the mountain that can be seen
  here:
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh5.googleusercontent.com/-8NpeydalE_Q/TOW_wE3rm4I/AAAAAAAAAhY/4TUvkKZ6pgU/s400/DSCF0081.JPG&quot;  alt=&quot;https://lh5.googleusercontent.com/-8NpeydalE_Q/TOW_wE3rm4I/AAAAAAAAAhY/4TUvkKZ6pgU/s400/DSCF0081.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  First of all, it would have been cold and unpleasant if it had been
  raining, but more than that, we got some great views.  Here is the
  view from the top of Saddleback:
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh5.googleusercontent.com/-678OhdNhOfg/TOW_zrmxFjI/AAAAAAAAAic/eX-WFora4js/s400/DSCF0087.JPG&quot;  alt=&quot;https://lh5.googleusercontent.com/-678OhdNhOfg/TOW_zrmxFjI/AAAAAAAAAic/eX-WFora4js/s400/DSCF0087.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  After descending Saddleback, we got to a road crossing near
  Rangeley, Maine.  We got a ride to the store from a person who had
  completed his hike a little earlier and was helping hikers on his
  way back south.  After we had gotten back on the trail, Grinner
  realized that she had left her hiking poles in the trail angel&#39;s
  car.  This was a cause for some consternation, but we had to keep
  pushing on.  Picker simply lent Grinner one of his poles, and we
  kept on hiking.
&lt;/p&gt;
&lt;p&gt;
  Our hike that evening led us to a pond with a canoe docked on it for
  hikers to use.  We took the canoe for a spin and filtered some water
  from the pond (though pond water is generally not very good).
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Bemis mountain &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  After our little paddle, we had a nice weather for most of the next
  day.  It was a good thing, too, because after a fairly easy morning,
  we had a highly treacherous descent followed by a steep ascent.  By
  the time we had reached the shelter, it was raining again.
&lt;/p&gt;
&lt;p&gt;
  When I awoke the next day, the clouds had dropped and fog had set
  in.  Luckily, Bemis mountain doesn&#39;t have any views to speak of
  anyway.  However, it does have one feature of the mountains in
  Southern Maine: trail that is a fairly sheer slab of rock, often
  with a stream running down it.  This is, needless to say, difficult
  to walk on.  I slipped multiple times before lunch, and was not
  having a great day.  On top of that, after lunch, there were two
  big, steep climbs.
&lt;/p&gt;
&lt;p&gt;
  At the end of the day, we got to a lean-to which contained a hiker
  who said that he had simply stayed there all day.  He had some
  rather depressing stories about how hard Southern Maine had been,
  but in a way, it cheered me up.  I could really see that others
  (even Northbounders, who had already come more than 1900 miles) were
  having trouble too.  As long as I wasn&#39;t alone, I knew I could make
  it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Notches &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  Our plan the next day was to make it to Baldpate Lean-to, just short
  of Grafton Notch (which contains the southernmost road that the
  trail crosses in Maine).  However, as we were nearing the shelter,
  we came across a group of teenagers.  We went to the shelter and
  found an even larger group of teens.  They had completely taken over
  the shelter and were engaged in several loud games, completely
  disturbing the peace of the outdoors.  In fact, the object of one of
  the games was to scream for the longest.  It was terrible.
&lt;/p&gt;
&lt;p&gt;
  Luckily for me, I had been lobbying to go on to Grafton Notch for
  most of the day anyway, so I was pleased when Picker and Grinner got
  fed up with the teens and decided to go on.  We made it to Grafton
  Notch and found some trail magic.  I don&#39;t think I&#39;ve described what
  trail magic is yet.  Sometimes people who live near the trail will
  leave food or drink on the trail for hikers.  In this case, a kind
  trail angel had driven his truck to Grafton Notch and was sitting
  with a cooler full of Nestle chocolate milk.  I don&#39;t think I have
  ever been so happy to drink milk, and it started a tradition for me
  of having a chocolate milkshake whenever possible in town.
&lt;/p&gt;
&lt;p&gt;
  We hiked about halfway up the next mountain after our refreshment
  and set up camp for the night in the middle of the woods.  This is
  known as &quot;stealth camping&quot;.
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh3.googleusercontent.com/-8pltuMntIbQ/TOW_4ePY2kI/AAAAAAAAAjY/bsjfBmAyuhI/s400/DSCF0096.JPG&quot;  alt=&quot;https://lh3.googleusercontent.com/-8pltuMntIbQ/TOW_4ePY2kI/AAAAAAAAAjY/bsjfBmAyuhI/s400/DSCF0096.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  We finished climbing the mountain the next morning, and went in the
  fog past Speck Pond.  It made for a couple of rather pretty pictures of some
  lilypads:
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh6.googleusercontent.com/-r0GHcdVF2X0/TOW_5EmEoJI/AAAAAAAAAjk/fDU5DQ9XK3U/s400/DSCF0097.JPG&quot;  alt=&quot;https://lh6.googleusercontent.com/-r0GHcdVF2X0/TOW_5EmEoJI/AAAAAAAAAjk/fDU5DQ9XK3U/s400/DSCF0097.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;  
  &lt;img src=&quot;https://lh6.googleusercontent.com/-DSra0_gp7yw/TOW_5dWrUaI/AAAAAAAAAjs/VUN6H4ISAeM/s400/DSCF0098.JPG&quot;  alt=&quot;https://lh6.googleusercontent.com/-DSra0_gp7yw/TOW_5dWrUaI/AAAAAAAAAjs/VUN6H4ISAeM/s400/DSCF0098.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  Going down from the pond, we had more trails on slippery sheer
  rocks.  Grinner got stuck for a couple of minutes at one point and I
  had to help her get down.
&lt;/p&gt;
&lt;p&gt;
  At the bottom of the hill, we had finally reached Mahoosuc Notch.
  Unfortunately I don&#39;t have any pictures of it (I was trying to
  remain as focussed as possible), because it is one of the most
  interesting features of the trail.  It looks like someone took a
  bunch of house-sized boulders and shook them so that they landed
  randomly at the bottom of a valley.  There are some pictures at the
  &lt;a href=&quot;http://en.wikipedia.org/wiki/Mahoosuc_Notch&quot;&gt;wikipedia page&lt;/a&gt; that give a good impression of what it is like.  Note
  especially the arrow painted on the rock &amp;ndash; those are essential to
  making it through in a reasonable amount of time.
&lt;/p&gt;
&lt;p&gt;
  In any case, we did the one mile through the notch in about two
  hours.  For me, it was not the most enjoyable: I took a bad fall
  right at the entrance to the notch, so my hands were hurting from
  stopping the fall, and I was a bit shaken up.  It was all I could do
  to keep my concentration and not fall again.
&lt;/p&gt;
&lt;p&gt;
  Finally, we got through the notch and I found that I was out of
  water.  There was no choice but to go on to the shelter to get
  water.  I hiked up the hill as quickly as I could, and fortuitously
  found a water bottle that someone else had dropped.  Not knowing the
  provenance of the water in the bottle, I wasn&#39;t able to drink from
  it, but it would come in handy later in the night.
&lt;/p&gt;
&lt;p&gt;
  I set up my hammock and Picker and Grinner decided to stay in the
  shelter.  It was their first time staying in a shelter with other
  people (they had tented until then), and Picker came over to gripe
  about it a bit.  After supper, I went to throw my bear bag.  At that
  point, I still wasn&#39;t great at it (and I guess I&#39;m still not), but
  one throw was so unfortunate as to be comical.  I had attached my
  water bottle to the line that would hold the bag up on the branch.
  On this particular throw, the water bottle arced behind me and came
  straight down on a sharp rock, splitting into multiple pieces.  I
  was glad I had found the other water bottle, but it was a pretty bad
  end to a rather unpleasant day, which should have been a lot more
  fun.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Run to the border &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;  
  The trail away from the shelter was nearly as hard as the trail to
  it.  There were ladders and rocks to climb up.  Early in the
  morning, as I was trying to climb up one of these rocks, I lost my
  grip and fell again &amp;ndash; this time five to ten feet.  I was extremely
  lucky not to get hurt.  I think the weight of my backpack caused me
  to fall backwards onto it, keeping me from being too badly injured.
  However, I struck my jaw on a rock on the way down, and it would be
  sore for a couple of days afterwards.  After bad falls two days in a
  row, I was eager to get to town.
&lt;/p&gt;
&lt;p&gt;
  First, though, we needed to cross the border between Maine and New
  Hampshire.  Here is a picture proving we did it:
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;https://lh4.googleusercontent.com/-YsZqdhHRV8c/TOW_7TpBdlI/AAAAAAAADfU/yupECnTzq0A/s400/DSCF0100.JPG&quot;  alt=&quot;https://lh4.googleusercontent.com/-YsZqdhHRV8c/TOW_7TpBdlI/AAAAAAAADfU/yupECnTzq0A/s400/DSCF0100.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  We didn&#39;t make it to town that night, but we made it within about
  six miles.  When we finally got to Gorham, NH the next morning,
  things were already seeming better to me.  We were in town and could
  hang out in a hostel for a fairly cheap zero day.  Also, the trail
  angel in whose car Picker had left her poles had left them at the
  hostel, so she got those back.  There was a place for me to get a
  milkshake.  So at least for a day and a half of not-hiking, I was a
  pretty happy hiker.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Next time &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
  Just past Gorham is the beginning of the &lt;a href=&quot;http://en.wikipedia.org/wiki/White_Mountains_(New_Hampshire)&quot;&gt;White mountains&lt;/a&gt;.  I will go
  off on my own in one of the toughest sections of the trail.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/hiking/southern-maine/#comments" type="text/html" />


	<link rel="comments" href="/posts/hiking/southern-maine/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>More ikiwiki plugin hacking</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin-4/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin-4/"/>






	<category term="emacs" />

	<category term="ikiwiki" />

	<category term="ikiwiki-org-plugin" />

	<category term="org-mode" />

	<category term="time-series" />


	<updated>2011-12-15T18:28:05Z</updated>
	<published>2011-12-15T18:28:05Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Major progress &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Now I am able to write wikilinks to images on the local server and
  not just hosted remotely.  For example,
  &lt;a href=&quot;http://chrismgray.github.com//./posts/time-series-2/interest-rates.png&quot;&gt;&lt;img src=&quot;http://chrismgray.github.com//posts/time-series-2/interest-rates.png&quot; alt=&quot;interest-rates.png&quot;/&gt;&lt;/a&gt; is an image that I wanted to show
  at the end of &lt;a href=&quot;http://chrismgray.github.com//./posts/time-series-2&quot;&gt;the article on my time-series framework&lt;/a&gt;, but which I
  couldn&#39;t because the org plugin wasn&#39;t able to show images at the
  time.
&lt;/p&gt;
&lt;p&gt;
  Another bit of progress is that I finally debugged the little shell
  shim to allow it to start up the emacs daemon properly.  Now I can
  just have one emacs window running and one emacs daemon in the
  background.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Remaining TODOs &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  The remaining work left to do should not be too difficult.  I have
  some of my own org customization baked into the file which would be
  better left up to the user&#39;s preferences.  I have to decide whether
  it makes more sense for the user to customize these preferences in
  the ikiwiki configuration file or just in their &lt;code&gt;.emacs&lt;/code&gt;.  The
  latter would be easier for me, but it might be easier for the user
  (especially if they have multiple wikis set up) to do it in the
  ikiwiki configuration file.
&lt;/p&gt;
&lt;p&gt;
  I also need to allow for verbatim inclusion of links.  I guess it
  makes more sense to do this in the standard org manner rather than
  the ikiwiki manner (with a backslash in front of the link).
  However, the link must be protected from ikiwiki interpreting it, so
  things might get a little complex there.
&lt;/p&gt;
&lt;p&gt;
  After those two things are completed, however, I think I&#39;m going to
  call this project done unless I hear feedback from users.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin-4/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin-4/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Git Annex in Anything</title>

	<id>http://chrismgray.github.com//posts/anything-git-annex/</id>

	<link href="http://chrismgray.github.com//posts/anything-git-annex/"/>






	<category term="anything.el" />

	<category term="emacs" />

	<category term="git-annex" />


	<updated>2011-12-12T20:03:17Z</updated>
	<published>2011-12-12T20:03:17Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;More fun with emacs &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Lately, I&#39;ve been playing around with &lt;a href=&quot;http://www.emacswiki.org/emacs/Anything&quot;&gt;anything.el&lt;/a&gt;, which has been
  described as &quot;Quicksilver for emacs&quot;.  I&#39;ve played around with it
  before, but have had a hard time changing my habits so that it&#39;s the
  first thing I think of doing when changing buffers or finding
  files.  The main reason, I think, is that &lt;a href=&quot;http://www.emacswiki.org/emacs/IswitchBuffers&quot;&gt;iswitch&lt;/a&gt; is usually just as
  fast.
&lt;/p&gt;
&lt;p&gt;
  However, I have started using &lt;a href=&quot;http://chrismgray.github.com//./posts/git-annex&quot;&gt;git annex&lt;/a&gt; to store my music and
  videos, and that has added some complexity to the way that I deal
  with them.  My usual flow is to do a &lt;code&gt;git annex find&lt;/code&gt; to see what
  files I have on my laptop, after which I play one of them with
  &lt;code&gt;smplayer&lt;/code&gt;.  When I am done with the file, I either use &lt;code&gt;git annex   drop&lt;/code&gt; or &lt;code&gt;git annex move&lt;/code&gt; to get rid of the file from my laptop.
&lt;/p&gt;
&lt;p&gt;
  All of that takes a lot of typing in the shell, so I wondered
  whether I could speed it up using &lt;code&gt;anything&lt;/code&gt;.  If you guessed that I
  could (given that I am writing this article), give yourself a gold
  star.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;How I did it &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  &lt;code&gt;anything&lt;/code&gt; is highly extensible.  Anyone can define their own setup
  with a command like this:
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;my-anything&lt;/span&gt; ()
  (interactive)
  (anything-other-buffer
   &#39;(anything-c-source-buffers+
     anything-c-source-recentf
     anything-c-source-files-in-current-dir+
     anything-c-source-git-annex
     anything-c-source-org-headline
     anything-c-source-bookmarks
     anything-c-source-bookmark-set
     anything-c-source-emms-files)
    &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;*anything*&quot;&lt;/span&gt;))
&lt;/pre&gt;




&lt;p&gt;
  which is just a function that tells &lt;code&gt;anything&lt;/code&gt; to use a bunch of
  different &quot;sources&quot; as possible interesting things that you might
  want to interact with.  For example, &lt;code&gt;anything-c-source-recentf&lt;/code&gt;
  gives a list of files that you recently had open.  That comes with
  the &lt;code&gt;anything&lt;/code&gt; package, though, so it&#39;s not too interesting from our
  point of view.  What is interesting is
  &lt;code&gt;anything-c-source-git-annex&lt;/code&gt;.  It looks like this:
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defvar&lt;/span&gt; &lt;span style=&quot;color: #f0dfaf;&quot;&gt;anything-c-source-git-annex&lt;/span&gt;
  &#39;((name . &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Git Annex&quot;&lt;/span&gt;)
    (candidates . (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; ()
                    (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;with-current-buffer&lt;/span&gt; anything-current-buffer
                     (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;with-temp-buffer&lt;/span&gt;
                       (call-process &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;git&quot;&lt;/span&gt; nil t nil &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;annex&quot;&lt;/span&gt; &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;find&quot;&lt;/span&gt;)
                       (goto-char (point-min))
                       (split-string (buffer-string) &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\n&quot;&lt;/span&gt;)))))
    (volatile)
    (action . ((&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Watch&quot;&lt;/span&gt; . anything-c-git-annex-play)
               (&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Drop&quot;&lt;/span&gt; . anything-c-git-annex-drop)
               (&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Move&quot;&lt;/span&gt; . anything-c-git-annex-move)
               (&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Copy&quot;&lt;/span&gt; . anything-c-git-annex-copy)))))
&lt;/pre&gt;




&lt;p&gt;
  It should hopefully be fairly easy to understand.  There are two
  interesting parts: getting candidate files, and the actions on the
  candidate files.  Getting the candidate files is as simple as
  putting the results of &lt;code&gt;git annex find&lt;/code&gt; into a temporary buffer
  (which must be in the same directory as the current buffer) and then
  putting the lines of the buffer into a list.  (This wouldn&#39;t work if
  the file names contained newlines, but I don&#39;t have any of those.
  If you wanted to be really careful, you could add the &quot;&amp;ndash;print0&quot;
  option to &lt;code&gt;call-process&lt;/code&gt; and split the string on &quot;\0&quot;.)
&lt;/p&gt;
&lt;p&gt;
  The actions are all functions.  The simplest is
  &lt;code&gt;anything-c-git-annex-drop&lt;/code&gt;, which just looks like
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;anything-c-git-annex-drop&lt;/span&gt; (candidate)
  (anything-git-annex-command &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;drop&quot;&lt;/span&gt; (concat &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; candidate &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;)))
&lt;/pre&gt;




&lt;p&gt;
  where &lt;code&gt;anything-git-annex-command&lt;/code&gt; just starts a shell command.
  More interesting is &lt;code&gt;anything-c-git-annex-copy&lt;/code&gt;, which is defined as
  follows
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;anything-c-git-annex-copy&lt;/span&gt; (candidate)
  (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;let*&lt;/span&gt; ((to (anything-comp-read
              &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;To Git Annex: &quot;&lt;/span&gt;
              (anything-c-git-remotes)
              &lt;span style=&quot;color: #8cd0d3;&quot;&gt;:must-match&lt;/span&gt; nil)))
    (anything-git-annex-command &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;copy&quot;&lt;/span&gt; (concat &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; candidate &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;)
                                &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;--to&quot;&lt;/span&gt; (concat &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; to &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;))))

(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;anything-c-git-remotes&lt;/span&gt; ()
  (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;with-temp-buffer&lt;/span&gt;
    (call-process &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;git&quot;&lt;/span&gt; nil (current-buffer) nil &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;remote&quot;&lt;/span&gt;)
    (delete &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;&quot;&lt;/span&gt; (split-string (buffer-string) &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\n&quot;&lt;/span&gt;))))
&lt;/pre&gt;




&lt;p&gt;
  The &lt;code&gt;anything-c-git-annex-copy&lt;/code&gt; command needs to know to which
  repository it should copy the candidate that has been selected.  I
  find out which one I want to copy to by listing the remotes that are
  known about by the git repository that the file is in.  Using
  &lt;code&gt;anything-comp-read&lt;/code&gt; means that the remotes are listed in the same
  style all of the &lt;code&gt;anything&lt;/code&gt; candidates are listed in.  It&#39;s pretty
  nice, because it keeps me in the same mode of operation as before.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Wrapping up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  It&#39;s a bit hard to write about what makes &lt;code&gt;anything.el&lt;/code&gt; an
  interesting way of doing things in emacs &amp;ndash; a screencast might be
  more helpful &amp;ndash; but I hope some of the power is evident from this
  little writeup.  I&#39;m going to try to train myself to use &lt;code&gt;anything&lt;/code&gt;
  more often.  We&#39;ll see how it goes.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/anything-git-annex/#comments" type="text/html" />


	<link rel="comments" href="/posts/anything-git-annex/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Lessons learned (so far) from the ikiwiki plugin</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin-3/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin-3/"/>






	<category term="emacs" />

	<category term="ikiwiki" />

	<category term="ikiwiki-org-plugin" />

	<category term="lab-notes" />

	<category term="org-mode" />


	<updated>2011-12-07T22:42:09Z</updated>
	<published>2011-12-07T22:00:36Z</published>

	<content type="html" xml:lang="en">
	
&lt;p&gt;Writing my &lt;a href=&quot;http://chrismgray.github.com//./posts/org-ikiwiki-plugin&quot;&gt;new plugin&lt;/a&gt; in Emacs Lisp, I learned a few things.  Here are
some of them, in no particular order.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;xml-rpc.el has some problems &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I don&#39;t mean to be unkind here.  xml-rpc.el seems pretty good if you
  are doing exactly one kind of thing: calling a method on a server
  that can be reached by http.  For anything else, it is very hard to
  use.   My plugin has the following requirements:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It must be called by another program through xml-rpc.
&lt;/li&gt;
&lt;li&gt;It must read from and write to files (and not http).
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    
  Neither of these things is made easy with xml-rpc.  The first I can
  understand &amp;ndash; xml-rpc would have to somehow insinuate itself into
  the emacs event loop and watch for calls all the time.  The second
  is less easy to understand.  Parsing xml-rpc is not really related
  to reading from http.  So why are the two things tied together?  In
  my opinion, xml-rpc.el would be a much nicer library if parsing the
  xml-rpc was separated completely from the http stuff.  There could
  be convenience functions, but they would be a layer of abstraction
  on top of the other two layers.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;xml.el has some problems &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  There isn&#39;t a function to get a list of all nodes with a given name?
  Are you kidding me?  Here is my implementation, but I bet there is a
  better one somewhere:
&lt;/p&gt;



&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;xml-find-nodes-matching&lt;/span&gt; (node name)
  &lt;span style=&quot;color: #8fb28f;&quot;&gt;&quot;Returns all children of `&lt;/span&gt;&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;node&lt;/span&gt;&lt;span style=&quot;color: #8fb28f;&quot;&gt;&#39; that have an `&lt;/span&gt;&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;xml-node-name&lt;/span&gt;&lt;span style=&quot;color: #8fb28f;&quot;&gt;&#39; equal to `&lt;/span&gt;&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #8fb28f;&quot;&gt;&#39;.&quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;if&lt;/span&gt; (or (eq node &#39;()) (not (listp node)))
      &#39;()
    (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;if&lt;/span&gt; (equal (xml-node-name node) name)
        (cons node (delq nil (mapcar (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (nd) (xml-find-nodes-matching nd name)) (xml-node-children node))))
      (delq nil (apply &#39;append (mapcar (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (nd) (xml-find-nodes-matching nd name)) (xml-node-children node)))))))
&lt;/pre&gt;




&lt;p&gt;
  In general, both xml-rpc.el and xml.el use a distressing number of
  calls to &lt;code&gt;car&lt;/code&gt;, &lt;code&gt;cdr&lt;/code&gt;, and &lt;code&gt;cdaddr&lt;/code&gt; (and all the versions in
  between).  
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Perl has some problems &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  Ikiwiki sends named parameters as an even-lengthed xml-rpc array
  rather than as an xml-rpc struct.  This is because not all of the
  functions that can be called via xml-rpc take named parameters and I
  guess Perl isn&#39;t smart enough to tell a hash from an even-lengthed
  array.  This isn&#39;t a huge problem, but it does mean that I need to
  convert the input to each of the functions that I write into a hash
  before I use it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Ikiwiki has some problems &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  I would like to be able to ignore files that don&#39;t have a particular
  extension.  For &lt;code&gt;htmlify&lt;/code&gt;, this is the way it works by default.  It
  seems like most of the functions that plugins can implement are not
  this way by default, though, and that is a shame.  If the plugin is
  not external &amp;ndash; that is, it is written in Perl &amp;ndash; there is really no
  problem.  The function is called, checks the extension of the source
  file, and returns without doing anything.  However, when the plugin
  is external and the call must happen through xml-rpc, ikiwiki must
  transmit the data via xml-rpc and receive the returned data back via
  xml-rpc.  Unnecessary calls take a lot longer in that context.
&lt;/p&gt;
&lt;p&gt;
  So I would like for most calls to &lt;code&gt;hook&lt;/code&gt; to take an optional
  &lt;code&gt;extension&lt;/code&gt; parameter that takes an extension (or even better, a
  regexp), and only call the function if the file name has the same
  extension (or matches the regexp).
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Working with emacs buffers is pretty nice &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
  Does a function that you&#39;re trying to write in emacs lisp give you a
  string?  It&#39;s pretty easy to throw it in a temporary buffer and then
  tell emacs to do the things that you would normally do while you
  were editing in order to get the proper information out of the
  string.  The &lt;code&gt;with-temporary-buffer&lt;/code&gt; macro makes it especially easy
  to do just that.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Getting info from a structured list is easier to do as a recursive function &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;


&lt;p&gt;
  One of the things that took me the longest was to figure out what
  this couple of lines of code was doing:
&lt;/p&gt;



&lt;pre class=&quot;src src-elisp&quot;&gt;(setq valtype (car (caddar xml-list))
      valvalue (caddr (caddar xml-list)))  
&lt;/pre&gt;




&lt;p&gt;
  What should the value of &lt;code&gt;xml-list&lt;/code&gt; look like in order to get the
  correct thing out of it?  It turned out that I needed to take the
  &lt;code&gt;cdr&lt;/code&gt; of the &lt;code&gt;cdaddr&lt;/code&gt; of the &lt;code&gt;caddar&lt;/code&gt; of the parsed xml in order to
  get the correct value.  That only worked when ikiwiki was responding
  to a method call, though.  I had a much easier time getting the
  right values out when I simply started using the
  &lt;code&gt;xml-find-nodes-matching&lt;/code&gt; function that I showed above.
&lt;/p&gt;
&lt;p&gt;
  When you see yourself writing more than a few &lt;code&gt;car&lt;/code&gt; or &lt;code&gt;cdr&lt;/code&gt; calls
  in a row (or &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;rest&lt;/code&gt;, or &lt;code&gt;nth&lt;/code&gt; calls in Clojure), stop and
  try to write a function that finds what you are looking for.  The
  function doesn&#39;t have to be recursive, but that might be the easiest
  way to do it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;It&#39;s nice when all calls and responses are dumped to a file &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;


&lt;p&gt;
  In a sense, this is just saying that code can be easier to debug if
  you&#39;re tracing it.  But since the calls between ikiwiki and the
  plugin must go through files anyway, we get the program traced
  automatically.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin-3/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin-3/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Updates on the ikiwiki plugin</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin-2/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin-2/"/>






	<category term="emacs" />

	<category term="ikiwiki-org-plugin" />

	<category term="org-mode" />


	<updated>2011-12-06T21:55:28Z</updated>
	<published>2011-12-06T21:55:28Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Progress &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;  
  Progress on the &lt;a href=&quot;http://chrismgray.github.com//./posts/org-ikiwiki-plugin&quot;&gt;plugin&lt;/a&gt; is proceeding apace.  In fact, the link in the
  last sentence is a major milestone &amp;ndash; for the first time, I can use
  what ikiwiki calls &lt;a href=&quot;http://ikiwiki.info/ikiwiki/wikilink/&quot;&gt;wikilinks&lt;/a&gt;.  What would happen previously is that
  ikiwiki would stick some raw HTML into an org file when it thought
  it saw a wikilink.  Org wouldn&#39;t know what to do with this, and
  would escape the HTML so that it would show up in the browser.  This
  is the reason that I couldn&#39;t include images in the posts &amp;ndash; they
  would get interpreted as wikilinks and then org would choke on the
  resulting HTML.
&lt;/p&gt;
&lt;p&gt;
  I&#39;m not sure that inserting local picture files works yet, but
  inserting pictures from other servers works okay.  For example, here
  is a picture of me standing at the US/Mexico border:
  &lt;img src=&quot;https://lh5.googleusercontent.com/-JiFi6diO5zM/Tgziytt-fwI/AAAAAAAACDc/dQXeYi-7odI/s144/DSCF0494.JPG&quot;  alt=&quot;https://lh5.googleusercontent.com/-JiFi6diO5zM/Tgziytt-fwI/AAAAAAAACDc/dQXeYi-7odI/s144/DSCF0494.JPG&quot; /&gt;
  and here is me after hiking to the US/Canada border:
  &lt;img src=&quot;https://lh3.googleusercontent.com/-j-b_h7_SSlo/TnyPfTGVCyI/AAAAAAAADWA/cFvVuP1QvB8/s144/DSCF0597.JPG&quot;  alt=&quot;https://lh3.googleusercontent.com/-j-b_h7_SSlo/TnyPfTGVCyI/AAAAAAAADWA/cFvVuP1QvB8/s144/DSCF0597.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  I think I have ironed out most of the kinks that caused things to
  hang previously when updating the site, but more testing is
  certainly needed.  Things that remain on my todo list include
  figuring out why it doesn&#39;t work when the emacs doing the compiling
  is daemonized, and testing whether locally hosted pictures work.
&lt;/p&gt;
&lt;p&gt;
  Any feedback would be appreciated!
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin-2/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin-2/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Clojure in Elisp</title>

	<id>http://chrismgray.github.com//posts/clojel/</id>

	<link href="http://chrismgray.github.com//posts/clojel/"/>






	<category term="clojure" />

	<category term="emacs" />


	<updated>2011-12-07T18:04:08Z</updated>
	<published>2011-12-04T00:32:56Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Probably a bad idea&amp;hellip; &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  File this one in the category of crazy ideas had while running.  I
  was thinking about my new org-mode plugin that I announced &lt;a href=&quot;http://chrismgray.github.com/posts/org-ikiwiki-plugin/&quot;&gt;yesterday&lt;/a&gt;
  and how hard it is to write in Emacs Lisp.  I was wishing that I
  could write it in Clojure instead.  Now, they&#39;re not &lt;b&gt;such&lt;/b&gt;
  different languages &amp;ndash; they both are evolutions of McCarthy&#39;s
  original lisp, but Clojure is a much prettier, less crufty
  language.
&lt;/p&gt;
&lt;p&gt;
  Let&#39;s look at just one construct in both languages: &lt;code&gt;let&lt;/code&gt;.  In both
  languages, this assigns values to variable names locally. In elisp,
  it looks like:
&lt;/p&gt;



&lt;pre class=&quot;src src-elisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;let*&lt;/span&gt; ((foo bar)
       (baz foo)))
&lt;/pre&gt;




&lt;p&gt;
  Instead of calling &lt;code&gt;let&lt;/code&gt; there, I had to call &lt;code&gt;let*&lt;/code&gt;, so that the
  results of the first assignment were known to the second assignment.
  There is also a lot of parentheses there.  (Unparenthesized
  variables become automatically initialized to &lt;code&gt;nil&lt;/code&gt; I believe.  I
  don&#39;t think that&#39;s a great idea.)  Contrast this with Clojure&#39;s
  &lt;code&gt;let&lt;/code&gt;.
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [foo bar
      baz foo])
&lt;/pre&gt;




&lt;p&gt;
  To me, that&#39;s much more readable.
&lt;/p&gt;
&lt;p&gt;
  Clojure&#39;s core libraries are also much more readable than most of
  elisp.  It seems to me that elisp was designed in the days where
  computer usage was charged by the letter and has not been updated
  since.  (Don&#39;t get me wrong &amp;ndash; I love Emacs and would rather program
  in elisp than Perl, but it has some warts.)
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Maybe not so crazy &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  Emacs already has a reader that can be used to turn lispy-looking
  things into lispy data structures.  Add some macros on top of that
  and you might be able to produce a &lt;code&gt;def&lt;/code&gt; that&#39;s equivalent to
  Clojure&#39;s.  Since much of Clojure is written in Clojure (and all of
  Clojurescript is), defining the Clojure functions might just be a
  hop, skip, and jump away from that.
&lt;/p&gt;
&lt;p&gt;
  Clojure could intern symbols into emacs (with namespaces prepended)
  and then emacs could use them.  Clojure could also call emacs
  functions directly &amp;ndash; any symbol that isn&#39;t defined in a Clojure
  namespace would be tested to see if it exists in emacs.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Probably pretty crazy after all &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  One of Clojure&#39;s big selling points is its concurrency semantics.
  I don&#39;t follow emacs development very closely, but I don&#39;t think
  emacs is going to support any of that any time soon.  Also, would it
  be possible to compile the new language to elisp bytecode?  How
  would &lt;code&gt;recur&lt;/code&gt; work?
&lt;/p&gt;
&lt;p&gt;
  There are a lot of questions, and here I am working on a plugin for
  a combination of tools that hardly anyone uses.  But everyone has to
  scratch their own itch as they say.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Totally crazy &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  &lt;b&gt;Update:&lt;/b&gt; As I suspected, this idea won&#39;t work: elisp doesn&#39;t have
  reader macros, so the difference in read syntaxes of clojure and
  elisp would be impossible to express to the elisp reader.  Maybe one
  could write a parser in elisp, but that would probably be slow and
  hard to do.  The idea was only attractive when large parts were
  already done.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/clojel/#comments" type="text/html" />


	<link rel="comments" href="/posts/clojel/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Plugin for org files in ikiwiki</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin/"/>






	<category term="emacs" />

	<category term="ikiwiki" />

	<category term="ikiwiki-org-plugin" />

	<category term="org-mode" />


	<updated>2011-12-02T23:32:03Z</updated>
	<published>2011-12-02T23:29:47Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;A new plugin &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Ikiwiki users who want to write org-mode files have long only had
  one plugin for ikiwiki to convert their files to html.  That plugin
  is good as it goes, but it is somewhat limited.  Thus, I am happy to
  announce a new plugin for converting org-mode.  It is located in my
  &lt;a href=&quot;https://github.com/chrismgray/ikiwiki-org-plugin&quot;&gt;github repository&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  It is still a bit rough around the edges, but it should be
  completely usable very soon.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Convex Hulls</title>

	<id>http://chrismgray.github.com//posts/convex-hulls/</id>

	<link href="http://chrismgray.github.com//posts/convex-hulls/"/>






	<category term="clojure" />

	<category term="computational-geometry" />

	<category term="convex-hull" />

	<category term="ikiwiki" />

	<category term="lab-notes" />


	<updated>2011-12-02T22:05:50Z</updated>
	<published>2011-11-30T18:06:31Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Convex Hulls Three Ways &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Whenever I watch cooking competition shows, they always have chefs
  presenting a foodstuff cooked in multiple different ways.  Today,
  I&#39;m doing that with algorithms.
&lt;/p&gt;
&lt;p&gt;
  The algorithm in question today is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Convex_hull&quot;&gt;convex hull&lt;/a&gt; algorithm.  In
  order of implementation complexity, and descending order of
  theoretical running time, there is the Jarvis March, Graham&#39;s Scan,
  and Chan&#39;s Algorithm.  All three are implemented in Clojure in my
  &lt;a href=&quot;https://github.com/chrismgray/convex-hull&quot;&gt;github repository&lt;/a&gt;.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;Jarvis March &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;


&lt;p&gt;
   The simplest of the algorithms, the Jarvis March was also one of
   the first output-sensitive computational geometry algorithms.  In a
   nutshell, you first find a point that you know to be on the convex
   hull, and then you find the next point by looking at all the rest
   of the points and determining which one has a segment that has the
   property that all the rest of the points are on one side of it.
   You repeatedly find the next point using this procedure until you
   get back to the first point.  There is basically no way to
   implement this algorithm that does not have a running time of
   \(O(hn)\), where \(h\) is the number of points on the convex hull
   and \(n\) is the number of input points.
&lt;/p&gt;
&lt;p&gt;
   The one implementation detail of the Jarvis March that is
   interesting is that whenever you see the concept of &quot;finding the
   next thing&quot; given some previous information, the Clojure
   implementation should almost always be lazy.  It turns out that
   implementing Jarvis March lazily will help in implementing Chan&#39;s
   Algorithm, so keep that in mind.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Graham&#39;s Scan &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;


&lt;p&gt;
   Graham&#39;s Scan is one of the algorithms I remember most vividly from
   the undergraduate computational geometry course that I took.  The
   professor, Godfried Toussaint, always referred to it as the &quot;three
   coins&quot; algorithm, so I have kept up that tradition in some of my
   function names in my implementation.
&lt;/p&gt;
&lt;p&gt;
   The algorithm first makes a polygon of the input points by sorting
   them by angle about the bottom-most point.  Then it goes around the
   polygon with a stack, pushing and popping points as it goes.  If
   that sounds familiar, it should &amp;ndash; it&#39;s the same idea as what I was
   talking about when I brought up the idea of &lt;a href=&quot;http://chrismgray.github.com/posts/parsing-polygons/&quot;&gt;parsing polygons&lt;/a&gt; a week
   and a half ago. 
&lt;/p&gt;
&lt;p&gt;
   Thus, I used the same polygon-parsing monad in my implementation as
   when I computed the visibility polygons last week.  It still works
   just as well.
&lt;/p&gt;
&lt;p&gt;
   Since the points must be sorted, Graham&#39;s Scan takes \(\Theta(n
   \log n)\).  Sorting can be reduced to computing convex hulls, so
   computing convex hulls has a \(\Omega(n \log n)\) lower bound,
   meaning that this algorithm is optimal.
&lt;/p&gt;
&lt;p&gt;
   But Chan&#39;s algorithm is better.  Weird huh?
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Chan&#39;s Algorithm &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;


&lt;p&gt;
   I must confess that I had always been a little intimidated by
   Chan&#39;s Algorithm.  It was invented by Timothy Chan, who has a
   well-earned reputation for being a genius, so I thought it would be
   really complicated.  It&#39;s not.  There is a decent &lt;a href=&quot;http://en.wikipedia.org/wiki/Chan&#39;s_algorithm&quot;&gt;description&lt;/a&gt; of it
   on Wikipedia, so I won&#39;t go into the details.  The gist is that you
   combine the two previous algorithms that I discussed.  The Jarvis
   March needs to be modified so that the points can be input as a
   list of smaller convex hulls, and the next point on the convex hull
   is found by doing a binary search on the smaller convex hulls.  But
   that is really the hardest part about the algorithm.  I have put
   the whole thing below, because I think it&#39;s pretty beautiful.
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;chans-algorithm&lt;/span&gt;
  &lt;span style=&quot;color: #8fb28f;&quot;&gt;&quot;Finds the convex hull of a set of points by&lt;/span&gt;
&lt;span style=&quot;color: #8fb28f;&quot;&gt;   the algorithm known as &#39;Chan&#39;s Algorithm&#39;.&quot;&lt;/span&gt;
  [pts]
  (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [bottom-pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;apply&lt;/span&gt; min-key &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:y&lt;/span&gt; pts)]
   (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;loop&lt;/span&gt; [m 3] &lt;span style=&quot;color: #708070;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;start out with triangles&lt;/span&gt;
     (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [partitioned-pts (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;partition&lt;/span&gt; m m [] pts)
           c-hs (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;map&lt;/span&gt; grahams-scan partitioned-pts)
           potential-ch (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;take&lt;/span&gt; m (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;apply&lt;/span&gt; jarvis-march pts c-hs))]
       (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;=&lt;/span&gt; bottom-pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;last&lt;/span&gt; potential-ch)) &lt;span style=&quot;color: #708070;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;assumes jarvis-march returns bottom-pt last&lt;/span&gt;
         potential-ch
         (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;recur&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;min&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;*&lt;/span&gt; m m) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;count&lt;/span&gt; pts))))))))
&lt;/pre&gt;




&lt;p&gt;
   The great thing about Chan&#39;s Algorithm is that it is also
   output-sensitive.  But instead of being \(O(nh)\) (which is
   \(O(n^2)\) in the worst case), it is \(O(n \log h)\), which is at
   least as good as Graham&#39;s Scan, but often better.  It is also quite
   simple to implement, given decent implementations of Jarvis March
   and Graham&#39;s Scan.  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Conclusion &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  Convex hull algorithms are great.  If I was ever to teach a
  computational geometry course (admittedly that&#39;s looking like a long
  shot now), I might start and finish the course with them.  The
  progression from the ultra-simple Jarvis March to the
  more-complicated Chan&#39;s Algorithm is really nice, and there are
  interesting new things to talk about the whole way.  They also show
  that computational geometry is not so hard to do in a functional
  style.  In fact, using laziness is what makes the implementation of
  Chan&#39;s Algorithm so simple.  So this might make a nice talk to give
  people who are already into functional programming as well.
&lt;/p&gt;
&lt;p&gt;
  The next thing I have in mind for this project is to animate the
  algorithms.  Viewing the output of algorithms is already pretty easy
  using Processing, but I would like to be able to see them as they
  are operating.  It would be great if I could do that without
  changing the code too much.  I have a couple of ideas, but I&#39;m not
  sure if they&#39;ll work yet.
&lt;/p&gt;
&lt;p&gt;
  Also, it is slightly embarrassing to admit, but my blogging system
  seems to not support putting images in posts.  So I am going to have
  to figure out how to work around (or even fix) that before I can
  show any results.
&lt;/p&gt;





&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/convex-hulls/#comments" type="text/html" />


	<link rel="comments" href="/posts/convex-hulls/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Mid-Maine</title>

	<id>http://chrismgray.github.com//posts/hiking/mid-maine/</id>

	<link href="http://chrismgray.github.com//posts/hiking/mid-maine/"/>






	<category term="AT" />

	<category term="hiking" />


	<updated>2011-12-01T07:47:32Z</updated>
	<published>2011-11-28T16:52:35Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Leaving Monson &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  When I last left my hiking tale, Picker, Grinner, Frosty and I had
  just gotten to Monson in time for breakfast.  We were hustled into
  showers and given clean clothes to put on while ours were in the
  washer.  We decided to stay in Monson for the rest of the day.  A
  bit of hiking terminology: a &lt;i&gt;zero&lt;/i&gt; is a day in which no walking is
  done.  What we were doing is called a &lt;i&gt;nearo&lt;/i&gt; (sometimes written
  &lt;i&gt;near-0&lt;/i&gt;), short for near-zero.  It&#39;s one of the most enjoyable ways
  to spend a day.  You only need to pay for one night at the hostel or
  hotel, but you have all the fun of a town day.
&lt;/p&gt;
&lt;p&gt;
  Anyway, breakfast was great &amp;ndash; unlimited pancakes, eggs, and some of
  the best home fries I had on the trail.  The big event of the day
  was the World Cup final.  The town of Monson is extremely small.
  There was one bar and one convenience store as well as the hostel we
  were staying at, named Shaw&#39;s.  We watched the final at the bar.  I
  was disappointed that the Netherlands lost, but I remember it being
  a really dirty game, so I guess the better team won in the end.
&lt;/p&gt;
&lt;p&gt;
  Frosty got a six-pack of beer for us to split, and it was through
  this beer that we met Wounded Knee.  The four of us had taken a seat
  to chat and drink the beer, when Wounded Knee showed up with one of
  the beers in his hand.  He began regaling us with hiking stories and
  bad jokes.  Later, we figured that he probably thought he was paying
  for the beer by telling us his great stories.  I think we would have
  been happier if he had just taken the beer and left us alone.
  (Cruel, but true &amp;ndash; at least he did provide an excellent topic of
  conversation over the next month.)
&lt;/p&gt;
&lt;p&gt;
  After a rather fitful sleep, Picker, Grinner, and I left Frosty in
  Monson.  He wanted to stay another day to rest after the 100-mile
  wilderness.  Unfortunately, it was the last time we would see him on
  our hike &amp;ndash; he got a stress fracture in his foot and stopped about
  50 miles later.
&lt;/p&gt;
&lt;p&gt;
  As we were being driven back to the trail, we were given a warning
  about a &quot;bahd hikeah&quot; (a bad hiker in the heavy Northeastern accent
  that is common in Maine).  He had apparently chosen to swim a
  dangerous river for which a ferry is provided after heaping abuse on
  the ferry operator.  He would not be served in Monson &amp;ndash; my first
  hint that there is a little network of hostel operators up and down
  the trail.  We actually did cross paths with the guy, and he looked
  more like a motorcycle enthusiast than a hiker, but other than that,
  there was no indication that he was really a bad guy.
&lt;/p&gt;
&lt;p&gt;
  The next day, Grinner was not feeling great.  I think it was for
  this reason that we did not go very far.  On the subsequent day, it
  became clear that Grinner was really sick.  Luckily, they had a cell
  phone with them, and were able to call Shaw&#39;s.  Grinner was picked
  up, and as she left, she told me to take care of Picker.  Which
  showed that she hadn&#39;t lost her sense of humor, because Picker is a
  bad-ass Army veteran who had been in Iraq.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Without Grinner &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  Picker was obviously concerned about his wife, so we made a plan to
  get to the next town as quickly as possible.  We got to the Kennebec
  river (the one with the ferry) unfortunately after the ferry had
  stopped for the night.  Partly to give myself something to do, and
  partly to cheer Picker up, I decided to find us some sodas.  The
  small town of Caratunk is near the trail at that point, but it
  didn&#39;t even have a convenience store, so I had to hitchhike to a
  small resort that had vending machines.  It was my first time
  hitching a ride, and I was glad that it worked out well.
&lt;/p&gt;
&lt;p&gt;
  The next day, we caught the first ferry across the river.  When one
  imagines a ferry, it is usually a fairly large boat.  This was not.
  It was a small canoe, operated by a local hippie.  I helped row us
  across the river, and we set out as fast as possible.  That was our
  first twenty-mile day.  The scenery was great, with a nice waterfall
  near the trail, but we were in a rush to see Grinner again.  Near
  the end of the day, the trail was rerouted, adding an extra couple
  of miles to our day.  We were quite glad to get to the campsite on
  the North side of Little Bigelow Mountain.
&lt;/p&gt;
&lt;p&gt;
  This put us only about 15 miles from Stratton, where we assumed that
  Grinner would be.  However, there were two big climbs between here
  and there.  We must have gotten to the top of the first fairly early
  in the morning.  We crossed a road in which someone had &lt;a href=&quot;https://picasaweb.google.com/lh/photo/2Qwgtnn5g3HJZgZp52HULHIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;painted&lt;/a&gt;
  &quot;2000 mi.&quot;, meaning that we still had two thousand miles to go --
  even after almost two weeks of hiking.
&lt;/p&gt;
&lt;p&gt;
  When we got to the camp site five miles from Stratton, there was a
  decision to make.  We had done 10 miles, but it had been 10 hard
  miles.  The rest of the way to the road would be all downhill, and
  there would be no more camping possibilities.  Picker left the
  decision up to me, but I could tell that he really wanted to go on.
  After a rest for my back (which still hadn&#39;t gotten as strong as
  would get), I decided that we should try to get to the road.  We
  also talked to a northbounder who said that the trail was pretty
  easy and that we could make it.  At that point, I had not learned to
  mistrust everything northbounders say.
&lt;/p&gt;
&lt;p&gt;
  I would have done well to mistrust the northbounder.  The descent
  was really difficult.  However, I did see a &lt;a href=&quot;https://picasaweb.google.com/lh/photo/bBFYuVIz4Xp42kq3LKPhEHIQdffm0dM4kWIdDklkn2s?feat=directlink&quot;&gt;beaver&lt;/a&gt;, so that made it
  kind of worth it.  When we got within two miles of the road, Picker
  started running.  I trotted along behind him, and we got to the road
  within thirty minutes.  We called the Stratton motel and were
  heartened to find that Grinner was already there.  She was feeling
  better, which was a huge relief.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Stratton &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  Since we had gone faster than expected between Monson and Stratton,
  and since Grinner still wasn&#39;t 100%, I decided to take an actual
  zero in Stratton.  I got a ride to Rangeley to get some better shoes
  and &lt;a href=&quot;http://www.amazon.com/gp/product/B001Q1P0K2/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=hikiandcodi-20&amp;amp;linkCode=as2&amp;amp;camp=217145&amp;amp;creative=399373&amp;amp;creativeASIN=B001Q1P0K2&quot;&gt;hiking poles&lt;/a&gt; at the outfitter there.  I still have those poles
  after more than 4000 miles, so I feel comfortable recommending
  them.
&lt;/p&gt;
&lt;p&gt;
  The other big event from our zero day in Stratton is that we found a
  lady that was selling pies from her house.  She didn&#39;t have the
  proper food license to sell slices, so we were forced to buy a whole
  cheesecake.  We had no choice in the matter.  I think we showed
  great restraint by not eating the entire cheesecake in one sitting
  &amp;ndash; we saved some for breakfast the next day.
&lt;/p&gt;
&lt;p&gt;
  Oh, and one final story from Stratton.  We had caught up to Wounded
  Knee by getting there a day earlier than scheduled.  During
  conversation, he mentioned that he had an injury that he needed some
  help putting a bandage on.  Somehow, I was volunteered to help him
  out.  It turned out that he had a really bad chafe on his bum and
  couldn&#39;t quite see it to put the bandage on himself.  So I got to
  help out with that.  Blech.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Next time &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  In the next installment, we go through Southern Maine.  This
  includes some of the most scenic and dangerous parts of the trail,
  including the &lt;a href=&quot;http://en.wikipedia.org/wiki/Mahoosuc_Notch&quot;&gt;Mahoosuc Notch&lt;/a&gt;.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/hiking/mid-maine/#comments" type="text/html" />


	<link rel="comments" href="/posts/hiking/mid-maine/comments.atom" type="application/atom+xml" />

</entry>

</feed>
