<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged clojurescript</title>
<link>http://chrismgray.github.com//tags/clojurescript/</link>
<description>Hiking and Coding</description>
<item>

	<title>SPOT Tracks</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/spot-tracks/</guid>

	<link>http://chrismgray.github.com//posts/spot-tracks/</link>


	<category>clojurescript</category>

	<category>hiking</category>

	<category>spot</category>


	<pubDate>Wed, 16 Nov 2011 09:20:05 -0700</pubDate>
	<dcterms:modified>2011-12-01T07:44:36Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Where I was &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I finally have a Clojurescript application that works basically the
  way I want it to.  It shows a Google Map of the US onto which is
  added a series of markers.  The markers are placed at the positions
  that I sent a SPOT message on one of my hikes.  They are dropped at
  intervals that correspond to the intervals between me sending them
  out.  The whole thing takes a minute to watch.  There are a couple
  of parts where it seems like nothing is happening &amp;ndash; those are
  winter when I wasn&#39;t hiking and a period of time between when the
  SPOT stopped working and when I got the replacement.  The app is
  &lt;a href=&quot;http://chrismgray.github.com/posts/spot-tracks/view.html&quot;&gt;here&lt;/a&gt;.  The &lt;a href=&quot;https://github.com/chrismgray/spot-tracks&quot;&gt;source code&lt;/a&gt; is on my github page, but it is mostly
  unedifying. 
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/spot-tracks/#comments</comments>

</item>
<item>

	<title>Scattered</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/scattered/</guid>

	<link>http://chrismgray.github.com//posts/scattered/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>email</category>

	<category>git</category>

	<category>git-annex</category>

	<category>notmuch</category>

	<category>spot</category>


	<pubDate>Mon, 14 Nov 2011 10:11:23 -0700</pubDate>
	<dcterms:modified>2011-12-01T07:43:31Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Scattered &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I am doing a bunch of things today, all fairly small.  I think it&#39;s
  because I finished working on the time series framework yesterday,
  so I&#39;m kind of at loose ends.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;New programming project &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  One thing that I would like to do is to take all the messages that I
  sent with my &lt;a href=&quot;http://findmespot.com&quot;&gt;SPOT&lt;/a&gt; device while hiking and make a small animation of
  them on Google Maps.  This would be another use of Clojurescript.
  My previous project &amp;ndash; a Clojurescript program for computing the
  Voronoi Diagram of a set of points input by a user &amp;ndash; is a bit
  stalled at the moment, so it&#39;s good to have something else to work
  on.  Also, I feel like adding points to a Google Map is something
  that Clojurescript is better suited to, rather than the fiddly
  numeric stuff that I was trying to make it do.  I will come back to
  the Voronoi Diagram at some point (hopefully fairly soon), but I am
  putting it on the back burner for the moment.
&lt;/p&gt;
&lt;p&gt;
  So far, I see two major tasks:
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Getting the coordinates and times of the SPOT messages &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;


&lt;p&gt;
   Every SPOT message is an email that contains the coordinates of
   where and when the message was sent.  Parsing the email can be done
   offline, so I will probably just use Clojure for that.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Putting them on the Google Map &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;


&lt;p&gt;
   The &lt;a href=&quot;http://code.google.com/apis/maps/documentation/javascript/overlays.html#Markers&quot;&gt;API&lt;/a&gt; for using Google Maps appears to be easy to use and
   well-thought-out.  There&#39;s even a way to drop the markers at
   different intervals &amp;ndash; just what I want to do.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Notmuch &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I am also playing with the &lt;a href=&quot;http://notmuch.org&quot;&gt;notmuch&lt;/a&gt; email client.  So far I quite
  like it.  It&#39;s a heck of a lot faster than my previous mail client,
  mainly because it doesn&#39;t do as much.  Like gmail, it is optimized
  towards two operations: searching and tagging.  I never really used
  tags in gmail, because doing so involves clicking around, but it&#39;s
  much faster in notmuch.  So far, this seems like the big advantage
  for notmuch.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Git annex &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  In an effort to use all the software written by &lt;a href=&quot;http://joey.kitenet.net/&quot;&gt;Joey Hess&lt;/a&gt; (not
  really, but it seems like it), I am also trying out &lt;a href=&quot;http://git-annex.branchable.com/&quot;&gt;git annex&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  So far, I have come up with one really compelling use case --
  syncing podcasts to my mp3 player.  My mp3 player has the problem
  that it will delete all the files on it at random times.  Thus, I
  need to keep a backup of all the files on it on my computer.
  However, when I am done listening to a podcast, I like to remove the
  file.  Hopefully, I will be able to sync the files that I remove
  myself (that is, remove them from the laptop), but not the files
  that get removed by the stupid thing crashing.
&lt;/p&gt;
&lt;p&gt;
  Another thing that I would like to do is put my music and video
  collections in git annex.  I&#39;m not sure that anything special would
  come from doing that, but it seems nice to have these things in
  version control.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/scattered/#comments</comments>

</item>
<item>

	<title>Resolving names in Clojurescript (followup)</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/cljs-name-resolving-2/</guid>

	<link>http://chrismgray.github.com//posts/cljs-name-resolving-2/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>rationals</category>


	<pubDate>Fri, 11 Nov 2011 18:07:52 -0700</pubDate>
	<dcterms:modified>2011-12-02T16:41:31Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Done! &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I was close with my guess in the last post.  What ended up working
  was
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [name (munge (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;symbol&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;str&lt;/span&gt; (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;-&amp;gt;&lt;/span&gt; env &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:ns&lt;/span&gt; &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:name&lt;/span&gt;) &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;.&quot;&lt;/span&gt; (munge (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;str&lt;/span&gt; sym)))))])
&lt;/pre&gt;




&lt;p&gt;
  For some reason, &lt;code&gt;(name sym)&lt;/code&gt; would crash the compiler from the
  &lt;code&gt;parse&lt;/code&gt; method but it wouldn&#39;t from other functions caled from the
  &lt;code&gt;parse&lt;/code&gt; method.  I finally gave up worrying about that and just used
  &lt;code&gt;(str sym)&lt;/code&gt; instead, since that is guaranteed to be the same in this
  case &amp;ndash; there is an &lt;code&gt;(assert (not (namespace sym)))&lt;/code&gt; just before the
  &lt;code&gt;let&lt;/code&gt; line.  I gave up on worrying about it, but someone who knows
  more about the compiler than me might want to try to figure out why
  it is.
&lt;/p&gt;
&lt;p&gt;
  I also needed to allow names defined in &lt;code&gt;cljs.core&lt;/code&gt; but redefined in
  another namespace to be called or referred to.  This involved
  changing the &lt;code&gt;resolve-existing-var&lt;/code&gt; function.  Again, &lt;code&gt;cljs.core&lt;/code&gt; is
  hardcoded:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [full-ns (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;and&lt;/span&gt; (core-name? env sym) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;nil?&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;get-in&lt;/span&gt; @namespaces [(&lt;span style=&quot;color: #8cd0d3;&quot;&gt;-&amp;gt;&lt;/span&gt; env &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:ns&lt;/span&gt; &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:name&lt;/span&gt;) &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:defs&lt;/span&gt; sym])))
                &#39;cljs.core
                (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;-&amp;gt;&lt;/span&gt; env &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:ns&lt;/span&gt; &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:name&lt;/span&gt;))])
&lt;/pre&gt;




&lt;p&gt;
  I added the second test: it simply asks whether the variable has
  been defined in the namespace.  If it hasn&#39;t, and the variable is
  defined in &lt;code&gt;cljs.core&lt;/code&gt;, only then is the namespace set to
  &lt;code&gt;cljs.core&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Remove the macros &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  It was also necessary to remove many of the macros from &lt;code&gt;core.clj&lt;/code&gt;
  in order to redefine the functions that I needed to in my project.
  As I noted earlier, my project is to implement rationals in
  Clojurescript, so I need to redefine most of the functions that work
  with numbers.  (At least, that is the way I am implementing it --
  there may be a better way that I don&#39;t know about.)  Many of these
  functions were implemented twice: once as a macro in &lt;code&gt;core.clj&lt;/code&gt; and
  once as a function in &lt;code&gt;core.cljs&lt;/code&gt;.  I am obviously biased towards
  being able to redefine these functions, so I think the macros should
  be removed, but at least one of the implementations is redundant.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/cljs-name-resolving-2/#comments</comments>

</item>
<item>

	<title>Resolving names in Clojurescript</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/cljs-name-resolving/</guid>

	<link>http://chrismgray.github.com//posts/cljs-name-resolving/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>rationals</category>


	<pubDate>Fri, 11 Nov 2011 07:23:38 -0700</pubDate>
	<dcterms:modified>2011-12-02T16:39:57Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Resolving names as they are compiled in Clojurescript &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I think I found the bug in the Clojurescript compiler that I was
  &lt;a href=&quot;http://chrismgray.github.com/more-rationals&quot;&gt;looking for yesterday&lt;/a&gt;.  Just to refresh the memory, when defining a
  function that has a function of the same name in &lt;code&gt;cljs.core&lt;/code&gt;, the
  compiler will assume that you are trying to redefine the function
  from &lt;code&gt;cljs.core&lt;/code&gt;, rather than the function in the namespace that you
  are actually in.  Since I am trying to redefine functions like &lt;code&gt;/&lt;/code&gt;
  and &lt;code&gt;*&lt;/code&gt;, this is a problem.
&lt;/p&gt;
&lt;p&gt;
  Let&#39;s look at the evidence.  First, there&#39;s this:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;parse&lt;/span&gt; &#39;def
  [op env form name]
  (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [pfn (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;fn&lt;/span&gt; ([_ sym] {&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:sym&lt;/span&gt; sym})
              ([_ sym init] {&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:sym&lt;/span&gt; sym &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:init&lt;/span&gt; init})
              ([_ sym doc init] {&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:sym&lt;/span&gt; sym &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:doc&lt;/span&gt; doc &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:init&lt;/span&gt; init}))
        args (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;apply&lt;/span&gt; pfn form)
        sym (&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:sym&lt;/span&gt; args)]
    (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;assert&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;not&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;namespace&lt;/span&gt; sym)) &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Can&#39;t def ns-qualified name&quot;&lt;/span&gt;)
    (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [name (munge (&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:name&lt;/span&gt; (resolve-var (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;dissoc&lt;/span&gt; env &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:locals&lt;/span&gt;) sym)))])))
&lt;/pre&gt;




&lt;p&gt;
  The important line there is the last: when defining a new name,
  &lt;code&gt;resolve-var&lt;/code&gt; is called on the symbol.  Let&#39;s have a look at that
  function.  There is a &lt;code&gt;cond&lt;/code&gt;, and when none of the tests return
  true, the following is done:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(munge (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;symbol&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;str&lt;/span&gt;
                (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;if&lt;/span&gt; (core-name? env sym)
                  &#39;cljs.core
                  (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;-&amp;gt;&lt;/span&gt; env &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:ns&lt;/span&gt; &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:name&lt;/span&gt;))
                &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;.&quot;&lt;/span&gt; (munge (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;name&lt;/span&gt; sym)))))
&lt;/pre&gt;




&lt;p&gt;
  This is seeing if the symbol name is in &lt;code&gt;cljs.core&lt;/code&gt;, and if it is
  setting the namespace of the symbol to &lt;code&gt;cljs.core&lt;/code&gt;.  Normally that
  would be correct &amp;ndash; one doesn&#39;t want to need to &lt;code&gt;use&lt;/code&gt; &lt;code&gt;cljs.core&lt;/code&gt; in
  every file &amp;ndash; but it doesn&#39;t allow for redefinition of functions
  that are in &lt;code&gt;cljs.core&lt;/code&gt; (at least without completely shadowing
  them).
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;What to do &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  So what can we do about this?  The first thing that seems odd to me
  is that the symbol being defined is being resolved first.  Every
  symbol that is defined is defined within its own namespace, so there
  should be no need to resolve it.  That suggests that we should be
  able to take the part of &lt;code&gt;resolve-var&lt;/code&gt; that doesn&#39;t have a special
  case for &lt;code&gt;cljs.core&lt;/code&gt; and put it into the &lt;code&gt;parse&lt;/code&gt; method.  Something
  like
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [name (munge (&lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:name&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;symbol&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;str&lt;/span&gt; (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;-&amp;gt;&lt;/span&gt; env &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:ns&lt;/span&gt; &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:name&lt;/span&gt;) &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;.&quot;&lt;/span&gt; (munge (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;name&lt;/span&gt; sym))))))])
&lt;/pre&gt;




&lt;p&gt;
  might work in the &lt;code&gt;parse&lt;/code&gt; method.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/cljs-name-resolving/#comments</comments>

</item>
<item>

	<title>More Rationals</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/more-rationals/</guid>

	<link>http://chrismgray.github.com//posts/more-rationals/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>rationals</category>


	<pubDate>Thu, 10 Nov 2011 09:55:06 -0700</pubDate>
	<dcterms:modified>2011-12-01T07:42:23Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;More about rationals &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  While attempting to implement &lt;a href=&quot;http://chrismgray.github.com/posts/rationals-in-cljs/&quot;&gt;support for rationals&lt;/a&gt; yesterday, I
  stumbled on what is (or at least, seems to me to be) a bug in the
  Clojure compiler itself.  That is, one can not refer to the function
  &lt;code&gt;/&lt;/code&gt; in namespaces other than &lt;code&gt;clojure.core&lt;/code&gt;.  Now, this is probably
  the first time that anyone has wanted to do this, so it&#39;s not
  surprising that no one had seen the bug before.  But what was
  surprising to me was that I could fix it fairly easily.  I submitted
  my patch, and I should be a real-life contributor to Clojure pretty
  soon.  As a person who doesn&#39;t see himself as a compiler guy, that&#39;s
  pretty exciting.
&lt;/p&gt;
&lt;p&gt;
  The next problem that I&#39;m having is that redefining the basic
  arithmetic operations does not seem to work properly in
  Clojurescript.  The compiled javascript is trying (at least as far
  as I can tell) to redefine &lt;code&gt;cljs.core/+&lt;/code&gt; rather than &lt;code&gt;rationals/+&lt;/code&gt;,
  for example.  This is the problem that I am going to try to solve
  today.  
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/more-rationals/#comments</comments>

</item>
<item>

	<title>Followup to the previous post</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/rationals-followup/</guid>

	<link>http://chrismgray.github.com//posts/rationals-followup/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>rationals</category>


	<pubDate>Wed, 09 Nov 2011 15:03:16 -0700</pubDate>
	<dcterms:modified>2011-12-01T07:46:11Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;A small followup &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  My previous post said that I would be using the macros defined in
  Clojurescript&#39;s &lt;code&gt;core.clj&lt;/code&gt;.  It turns out that doesn&#39;t make a lot of
  sense.  I am using the functions defined in &lt;code&gt;core.cljs&lt;/code&gt; instead.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/rationals-followup/#comments</comments>

</item>
<item>

	<title>Rationals in Clojurescript</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/rationals-in-cljs/</guid>

	<link>http://chrismgray.github.com//posts/rationals-in-cljs/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>rationals</category>

	<category>voronoi-diagram</category>


	<pubDate>Wed, 09 Nov 2011 10:13:06 -0700</pubDate>
	<dcterms:modified>2011-12-01T07:46:11Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Rationals in Clojurescript &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
Last night, I uploaded some code to compute the &lt;a href=&quot;http://en.wikipedia.org/wiki/Voronoi_diagram&quot;&gt;Voronoi Diagram&lt;/a&gt; of a
set of points to &lt;a href=&quot;https://github.com/chrismgray/voronoi-diagram/&quot;&gt;github&lt;/a&gt;.  This post is not directly about that code --
I&#39;ll write about that when it is completely working &amp;ndash; but rather
about something that I noticed when I tried to convert the code to
&lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;Clojurescript&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are a few things that are known not to work in Clojurescript
that work in Clojure: I had to convert calls from &lt;code&gt;lazy-cat&lt;/code&gt; to
&lt;code&gt;concat&lt;/code&gt;, for example.  However, the one difference that really broke
things for me was the lack of support for rational arithmetic in
Clojurescript.
&lt;/p&gt;
&lt;p&gt;
One major element of my algorithm is a test to determine whether a
given point is on a given line segment.  With integer coordinates for
the sites that determine the Voronoi Diagram and the bounding box,
everything about this test can be represented as a rational number.
Since Clojure gives you rational numbers by default, while
Clojurescript simply uses Javascript&#39;s arithmetic facilities, the test
works in Clojure but not in Clojurescript.
&lt;/p&gt;
&lt;p&gt;
So what can be done about this?  Here are some options:
&lt;/p&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-1-1&quot;&gt;Use floats, but more smartly &lt;br/&gt;

&lt;p&gt;
     Probably the simplest option, here we would not test for &lt;i&gt;equality&lt;/i&gt;,
     but for &lt;i&gt;almost equality&lt;/i&gt;.  That is, if the distance between two
     points is a very small number (&lt;i&gt;e.g.&lt;/i&gt; a millionth), and all of the
     input is integer, then the two points are probably the same.  This
     option is obviously not too satisfying from a theoretical
     standpoint, especially if the small number is hardcoded.  I am
     fairly sure that there has been research to determine what the exact
     value of the small number should be, but that would take the code
     out of the realm of simplicity.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-1-2&quot;&gt;Implement rationals in Clojurescript &lt;br/&gt;

&lt;p&gt;
     I am not sure how possible this option is.  However, it is currently
     the most appealing to me.  Rational arithmetic is not so difficult
     to implement, especially in the limited use case that I need it for:
     I am pretty sure that I could get away with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, and
     the comparison operators.  These are currently implemented as
     &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/3c83c62d973b0153a9e28bea7beb73794fbf9065/src/clj/cljs/core.clj#L51&quot;&gt;macros&lt;/a&gt; in Clojurescript, which means that they take the
     Clojurescript code and change it Javascript code.  This allows
     the Clojurescript compiler to take the prefix syntax of
     Clojurescript and change it to the infix syntax of Javascript.
&lt;/p&gt;
&lt;p&gt;
     If we were to redefine the operators to be functions, we might
     have a chance to run different code given different types of
     input.  The &lt;code&gt;defmulti&lt;/code&gt; and &lt;code&gt;defmethod&lt;/code&gt; macros seem perfect for
     this.  The major question is whether it is possible to shadow the
     names of the operators but use them nevertheless.  That is, will
     I be able to add &lt;code&gt;(:require-macros [clojure.core :as core])&lt;/code&gt; to
     my namespace and then use, for example, &lt;code&gt;core/*&lt;/code&gt;?
&lt;/p&gt;
&lt;p&gt;
     The other downside, beyond the potential difficulties, is the
     fact that the generated Javascript will no longer be quite as
     pretty.  What used to be infix notation will be converted to
     function calls.  Additionally, there will be a fairly high
     penalty for doing arithmetic &amp;ndash; three or four function calls per
     arithmetic operation (assuming the polymorphic solution I have in
     mind works) rather than the current single operation.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Conclusion &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  I am going to try to implement the rationals in Clojurescript
  first.  At the very least, I will learn a bit more about how
  multimethods work in Clojure. 
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/rationals-in-cljs/#comments</comments>

</item>

</channel>
</rss>
