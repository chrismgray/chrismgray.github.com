<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged git-annex</title>
<link href="http://chrismgray.github.com//tags/git-annex/"/>
<link href="http://chrismgray.github.com//tags/git-annex/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Hiking and Coding</name>

</author>




<id>http://chrismgray.github.com//tags/git-annex/</id>

<subtitle type="html">Hiking and Coding</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20111107">ikiwiki</generator>
<updated>2011-12-12T20:03:17Z</updated>
<entry>
	<title>Git Annex in Anything</title>

	<id>http://chrismgray.github.com//posts/anything-git-annex/</id>

	<link href="http://chrismgray.github.com//posts/anything-git-annex/"/>






	<category term="anything.el" />

	<category term="emacs" />

	<category term="git-annex" />


	<updated>2011-12-12T20:03:17Z</updated>
	<published>2011-12-12T20:03:17Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;More fun with emacs &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Lately, I&#39;ve been playing around with &lt;a href=&quot;http://www.emacswiki.org/emacs/Anything&quot;&gt;anything.el&lt;/a&gt;, which has been
  described as &quot;Quicksilver for emacs&quot;.  I&#39;ve played around with it
  before, but have had a hard time changing my habits so that it&#39;s the
  first thing I think of doing when changing buffers or finding
  files.  The main reason, I think, is that &lt;a href=&quot;http://www.emacswiki.org/emacs/IswitchBuffers&quot;&gt;iswitch&lt;/a&gt; is usually just as
  fast.
&lt;/p&gt;
&lt;p&gt;
  However, I have started using &lt;a href=&quot;http://chrismgray.github.com//tags/git-annex/./../../posts/git-annex&quot;&gt;git annex&lt;/a&gt; to store my music and
  videos, and that has added some complexity to the way that I deal
  with them.  My usual flow is to do a &lt;code&gt;git annex find&lt;/code&gt; to see what
  files I have on my laptop, after which I play one of them with
  &lt;code&gt;smplayer&lt;/code&gt;.  When I am done with the file, I either use &lt;code&gt;git annex   drop&lt;/code&gt; or &lt;code&gt;git annex move&lt;/code&gt; to get rid of the file from my laptop.
&lt;/p&gt;
&lt;p&gt;
  All of that takes a lot of typing in the shell, so I wondered
  whether I could speed it up using &lt;code&gt;anything&lt;/code&gt;.  If you guessed that I
  could (given that I am writing this article), give yourself a gold
  star.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;How I did it &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  &lt;code&gt;anything&lt;/code&gt; is highly extensible.  Anyone can define their own setup
  with a command like this:
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;my-anything&lt;/span&gt; ()
  (interactive)
  (anything-other-buffer
   &#39;(anything-c-source-buffers+
     anything-c-source-recentf
     anything-c-source-files-in-current-dir+
     anything-c-source-git-annex
     anything-c-source-org-headline
     anything-c-source-bookmarks
     anything-c-source-bookmark-set
     anything-c-source-emms-files)
    &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;*anything*&quot;&lt;/span&gt;))
&lt;/pre&gt;




&lt;p&gt;
  which is just a function that tells &lt;code&gt;anything&lt;/code&gt; to use a bunch of
  different &quot;sources&quot; as possible interesting things that you might
  want to interact with.  For example, &lt;code&gt;anything-c-source-recentf&lt;/code&gt;
  gives a list of files that you recently had open.  That comes with
  the &lt;code&gt;anything&lt;/code&gt; package, though, so it&#39;s not too interesting from our
  point of view.  What is interesting is
  &lt;code&gt;anything-c-source-git-annex&lt;/code&gt;.  It looks like this:
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defvar&lt;/span&gt; &lt;span style=&quot;color: #f0dfaf;&quot;&gt;anything-c-source-git-annex&lt;/span&gt;
  &#39;((name . &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Git Annex&quot;&lt;/span&gt;)
    (candidates . (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; ()
                    (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;with-current-buffer&lt;/span&gt; anything-current-buffer
                     (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;with-temp-buffer&lt;/span&gt;
                       (call-process &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;git&quot;&lt;/span&gt; nil t nil &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;annex&quot;&lt;/span&gt; &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;find&quot;&lt;/span&gt;)
                       (goto-char (point-min))
                       (split-string (buffer-string) &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\n&quot;&lt;/span&gt;)))))
    (volatile)
    (action . ((&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Watch&quot;&lt;/span&gt; . anything-c-git-annex-play)
               (&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Drop&quot;&lt;/span&gt; . anything-c-git-annex-drop)
               (&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Move&quot;&lt;/span&gt; . anything-c-git-annex-move)
               (&lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;Copy&quot;&lt;/span&gt; . anything-c-git-annex-copy)))))
&lt;/pre&gt;




&lt;p&gt;
  It should hopefully be fairly easy to understand.  There are two
  interesting parts: getting candidate files, and the actions on the
  candidate files.  Getting the candidate files is as simple as
  putting the results of &lt;code&gt;git annex find&lt;/code&gt; into a temporary buffer
  (which must be in the same directory as the current buffer) and then
  putting the lines of the buffer into a list.  (This wouldn&#39;t work if
  the file names contained newlines, but I don&#39;t have any of those.
  If you wanted to be really careful, you could add the &quot;&amp;ndash;print0&quot;
  option to &lt;code&gt;call-process&lt;/code&gt; and split the string on &quot;\0&quot;.)
&lt;/p&gt;
&lt;p&gt;
  The actions are all functions.  The simplest is
  &lt;code&gt;anything-c-git-annex-drop&lt;/code&gt;, which just looks like
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;anything-c-git-annex-drop&lt;/span&gt; (candidate)
  (anything-git-annex-command &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;drop&quot;&lt;/span&gt; (concat &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; candidate &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;)))
&lt;/pre&gt;




&lt;p&gt;
  where &lt;code&gt;anything-git-annex-command&lt;/code&gt; just starts a shell command.
  More interesting is &lt;code&gt;anything-c-git-annex-copy&lt;/code&gt;, which is defined as
  follows
&lt;/p&gt;



&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;anything-c-git-annex-copy&lt;/span&gt; (candidate)
  (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;let*&lt;/span&gt; ((to (anything-comp-read
              &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;To Git Annex: &quot;&lt;/span&gt;
              (anything-c-git-remotes)
              &lt;span style=&quot;color: #8cd0d3;&quot;&gt;:must-match&lt;/span&gt; nil)))
    (anything-git-annex-command &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;copy&quot;&lt;/span&gt; (concat &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; candidate &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;)
                                &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;--to&quot;&lt;/span&gt; (concat &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; to &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;))))

(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;anything-c-git-remotes&lt;/span&gt; ()
  (&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;with-temp-buffer&lt;/span&gt;
    (call-process &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;git&quot;&lt;/span&gt; nil (current-buffer) nil &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;remote&quot;&lt;/span&gt;)
    (delete &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;&quot;&lt;/span&gt; (split-string (buffer-string) &lt;span style=&quot;color: #cc9393;&quot;&gt;&quot;\n&quot;&lt;/span&gt;))))
&lt;/pre&gt;




&lt;p&gt;
  The &lt;code&gt;anything-c-git-annex-copy&lt;/code&gt; command needs to know to which
  repository it should copy the candidate that has been selected.  I
  find out which one I want to copy to by listing the remotes that are
  known about by the git repository that the file is in.  Using
  &lt;code&gt;anything-comp-read&lt;/code&gt; means that the remotes are listed in the same
  style all of the &lt;code&gt;anything&lt;/code&gt; candidates are listed in.  It&#39;s pretty
  nice, because it keeps me in the same mode of operation as before.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Wrapping up &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  It&#39;s a bit hard to write about what makes &lt;code&gt;anything.el&lt;/code&gt; an
  interesting way of doing things in emacs &amp;ndash; a screencast might be
  more helpful &amp;ndash; but I hope some of the power is evident from this
  little writeup.  I&#39;m going to try to train myself to use &lt;code&gt;anything&lt;/code&gt;
  more often.  We&#39;ll see how it goes.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/anything-git-annex/#comments" type="text/html" />


	<link rel="comments" href="/posts/anything-git-annex/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Git Annex</title>

	<id>http://chrismgray.github.com//posts/git-annex/</id>

	<link href="http://chrismgray.github.com//posts/git-annex/"/>






	<category term="git" />

	<category term="git-annex" />


	<updated>2011-12-03T03:47:16Z</updated>
	<published>2011-11-24T03:02:00Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Using git annex &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I remember being a young pup using Debian and reading the mailing
  lists.  I was always seeing the name &lt;a href=&quot;http://joey.kitenet.net/blog/&quot;&gt;Joey Hess&lt;/a&gt; answering the tough
  questions.  I had great respect for him then, and it has remained to
  this day.  I have probably used his &lt;code&gt;unclutter&lt;/code&gt; program for ten
  years and it has never crashed.  I recently installed &lt;code&gt;ikiwiki&lt;/code&gt; to
  run this blog, &lt;code&gt;etckeeper&lt;/code&gt; to track changes in my config files, and
  I figured that I should try his other recent software: &lt;code&gt;git-annex&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  I came at it with two objectives: to be able to sync my podcasts and
  to be able to manage my media files better.  The second has worked
  really well, and the first &lt;a href=&quot;http://git-annex.branchable.com/forum/Podcast_syncing_use-case/&quot;&gt;is hopefully getting there soon&lt;/a&gt;.  I will
  concentrate on the second for the moment, since that is what I have
  working the best.  There are multiple use-cases described on
  &lt;a href=&quot;http://git-annex.branchable.com&quot;&gt;git-annex&#39;s website&lt;/a&gt; &amp;ndash; I will just go through mine.
&lt;/p&gt;
&lt;p&gt;
  All of my media files are on a terabyte external drive.  When I am
  at home, I have it mounted as an NFS drive on &lt;code&gt;/media/mybook&lt;/code&gt;.  I
  have videos there, split into &lt;code&gt;tv&lt;/code&gt; and &lt;code&gt;movies&lt;/code&gt; folders, as well as
  music in the &lt;code&gt;music&lt;/code&gt; folder.  All of the folders are treated the
  same, so I will just go through the procedure I used in the &lt;code&gt;music&lt;/code&gt;
  folder.
&lt;/p&gt;
&lt;p&gt;
  First, I set up the annex:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;~ $ cd /media/mybook/music
/media/mybook/music $ git init .
/media/mybook/music $ git annex init mybook-music
/media/mybook/music $ emacs .git/config
&lt;/pre&gt;



&lt;p&gt;
  at this point, I set the &lt;code&gt;backends&lt;/code&gt; keyword in the &lt;code&gt;[annex]&lt;/code&gt; section
  to either &lt;code&gt;SHA1E&lt;/code&gt; or &lt;code&gt;SHA256E&lt;/code&gt;.  There is a tradeoff there between
  speed and safety &amp;ndash; it is a bit more likely that two files hash to
  the same file with &lt;code&gt;SHA1E&lt;/code&gt;, but it is faster than &lt;code&gt;SHA256E&lt;/code&gt;.  The
  &lt;code&gt;E&lt;/code&gt; at the end of the hash means that the filename extension is
  preserved in the hashing.  This is important for some mp3 players
  and other programs that can not tell what type a file is without an
  extension.  The next command takes a long time with a lot of files:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;/media/mybook/music $ git annex add .
[All the files are hashed and their contents are put into .git/annex]
[You will see that all your files are now symlinks to files in .git/annex]
/media/mybook/music $ git commit -m &quot;Added my files&quot;
&lt;/pre&gt;



&lt;p&gt;
  Now it is possible to clone this repository back on the laptop
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;~ $ git clone /media/mybook/music
~ $ cd music
~/music $ git annex init laptop-music
~/music $ git remote add mybook-music /media/mybook/music
~/music $ cd /media/mybook/music
/media/mybook/music $ git remote add laptop-music ~/music
&lt;/pre&gt;



&lt;p&gt;
  And now all of the cool stuff can begin.  You can look inside the
  &lt;code&gt;~/music&lt;/code&gt; directory and see that it appears that all your files are
  there.  However, they are not taking up any space.  What is
  happening is that they are broken symlinks to objects in
  &lt;code&gt;~/music/.git/annex&lt;/code&gt;.  If I want to listen to some of the music, I
  move it over to the laptop with the following command
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;~/music $ git annex get --from mybook-music Beatles/
&lt;/pre&gt;



&lt;p&gt;
  I can now take my laptop on the plane and listen to the Beatles.
  When I&#39;m back from my trip, I can free up the space by doing
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;~/music $ git annex drop Beatles/
&lt;/pre&gt;



&lt;p&gt;
  Suppose I obtain some new music, getting into the Rolling Stones.
  Then I can use &lt;code&gt;git annex add&lt;/code&gt; to add the Stones into my collection,
  &lt;code&gt;git commit&lt;/code&gt; them and &lt;code&gt;git pull&lt;/code&gt; in the correct repository to
  duplicate the information.  I can then use &lt;code&gt;git annex copy&lt;/code&gt; or &lt;code&gt;git   annex move&lt;/code&gt; to put the files where I want them.
&lt;/p&gt;
&lt;p&gt;
  For now, I have a queue of unseen videos and music that I want to
  hear on my laptop, while the bulk of my media collection sits on my
  external drive.  I can take what I want with me and not worry about
  my whole collection using up all of my hard drive.  I can see what I
  have in a particular repository with the &lt;code&gt;git annex find&lt;/code&gt; command.
&lt;/p&gt;
&lt;p&gt;
  As I said, there are many other uses for git-annex and features that
  I have not yet learned.  One thing that I am interested in trying
  out is using the &lt;a href=&quot;http://git-annex.branchable.com/special_remotes/web/&quot;&gt;web&lt;/a&gt; as a repository.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/git-annex/#comments" type="text/html" />


	<link rel="comments" href="/posts/git-annex/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Scattered</title>

	<id>http://chrismgray.github.com//posts/scattered/</id>

	<link href="http://chrismgray.github.com//posts/scattered/"/>






	<category term="clojure" />

	<category term="clojurescript" />

	<category term="email" />

	<category term="git" />

	<category term="git-annex" />

	<category term="notmuch" />

	<category term="spot" />


	<updated>2011-12-01T07:43:31Z</updated>
	<published>2011-11-14T17:11:23Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Scattered &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I am doing a bunch of things today, all fairly small.  I think it&#39;s
  because I finished working on the time series framework yesterday,
  so I&#39;m kind of at loose ends.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;New programming project &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  One thing that I would like to do is to take all the messages that I
  sent with my &lt;a href=&quot;http://findmespot.com&quot;&gt;SPOT&lt;/a&gt; device while hiking and make a small animation of
  them on Google Maps.  This would be another use of Clojurescript.
  My previous project &amp;ndash; a Clojurescript program for computing the
  Voronoi Diagram of a set of points input by a user &amp;ndash; is a bit
  stalled at the moment, so it&#39;s good to have something else to work
  on.  Also, I feel like adding points to a Google Map is something
  that Clojurescript is better suited to, rather than the fiddly
  numeric stuff that I was trying to make it do.  I will come back to
  the Voronoi Diagram at some point (hopefully fairly soon), but I am
  putting it on the back burner for the moment.
&lt;/p&gt;
&lt;p&gt;
  So far, I see two major tasks:
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Getting the coordinates and times of the SPOT messages &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;


&lt;p&gt;
   Every SPOT message is an email that contains the coordinates of
   where and when the message was sent.  Parsing the email can be done
   offline, so I will probably just use Clojure for that.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Putting them on the Google Map &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;


&lt;p&gt;
   The &lt;a href=&quot;http://code.google.com/apis/maps/documentation/javascript/overlays.html#Markers&quot;&gt;API&lt;/a&gt; for using Google Maps appears to be easy to use and
   well-thought-out.  There&#39;s even a way to drop the markers at
   different intervals &amp;ndash; just what I want to do.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Notmuch &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I am also playing with the &lt;a href=&quot;http://notmuch.org&quot;&gt;notmuch&lt;/a&gt; email client.  So far I quite
  like it.  It&#39;s a heck of a lot faster than my previous mail client,
  mainly because it doesn&#39;t do as much.  Like gmail, it is optimized
  towards two operations: searching and tagging.  I never really used
  tags in gmail, because doing so involves clicking around, but it&#39;s
  much faster in notmuch.  So far, this seems like the big advantage
  for notmuch.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Git annex &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  In an effort to use all the software written by &lt;a href=&quot;http://joey.kitenet.net/&quot;&gt;Joey Hess&lt;/a&gt; (not
  really, but it seems like it), I am also trying out &lt;a href=&quot;http://git-annex.branchable.com/&quot;&gt;git annex&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  So far, I have come up with one really compelling use case --
  syncing podcasts to my mp3 player.  My mp3 player has the problem
  that it will delete all the files on it at random times.  Thus, I
  need to keep a backup of all the files on it on my computer.
  However, when I am done listening to a podcast, I like to remove the
  file.  Hopefully, I will be able to sync the files that I remove
  myself (that is, remove them from the laptop), but not the files
  that get removed by the stupid thing crashing.
&lt;/p&gt;
&lt;p&gt;
  Another thing that I would like to do is put my music and video
  collections in git annex.  I&#39;m not sure that anything special would
  come from doing that, but it seems nice to have these things in
  version control.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/scattered/#comments" type="text/html" />


	<link rel="comments" href="/posts/scattered/comments.atom" type="application/atom+xml" />

</entry>

</feed>
