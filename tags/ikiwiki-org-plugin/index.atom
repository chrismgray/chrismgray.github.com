<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged ikiwiki-org-plugin</title>
<link href="http://chrismgray.github.com//tags/ikiwiki-org-plugin/"/>
<link href="http://chrismgray.github.com//tags/ikiwiki-org-plugin/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Hiking and Coding</name>

</author>




<id>http://chrismgray.github.com//tags/ikiwiki-org-plugin/</id>

<subtitle type="html">Hiking and Coding</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20120202">ikiwiki</generator>
<updated>2012-03-14T15:47:03Z</updated>
<entry>
	<title>Org Plugin Rethink</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin-5/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin-5/"/>






	<category term="emacs" />

	<category term="ikiwiki" />

	<category term="ikiwiki-org-plugin" />

	<category term="lab-notes" />

	<category term="org-mode" />


	<updated>2012-03-14T15:47:03Z</updated>
	<published>2012-03-14T15:47:03Z</published>

	<content type="html" xml:lang="en">
	
&lt;p&gt;I am glad to announce a new version of my &lt;a href=&quot;https://github.com/chrismgray/ikiwiki-org-plugin&quot;&gt;ikiwiki org plugin&lt;/a&gt;.  This is
a major change to the way things had worked previously, and is much
faster than previous versions.
&lt;/p&gt;
&lt;p&gt;
The installation procedure has changed, so please read the
&lt;code&gt;README.org&lt;/code&gt; file in the repository for information about how to
install the plugin.  Also, if you have installed a previous version,
please remove that since it may conflict.  Also be sure that you kill
any daemonized versions of emacs that are running.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  This version of the plugin is no longer what ikiwiki calls an
  &quot;external plugin&quot;.  The overhead associated with XML-RPC was simply
  too high (at least on the emacs side of things).  I tried
  &lt;a href=&quot;http://chrismgray.github.com//tags/ikiwiki-org-plugin/./../../posts/ikiwiki-hacking&quot;&gt;working around&lt;/a&gt; it by having less communication between the compiler
  and the plugin, but the ikiwiki developers &lt;a href=&quot;http://ikiwiki.info/todo/be_more_selective_about_running_hooks/&quot;&gt;didn&#39;t really think it was a great idea&lt;/a&gt;.  So I have basically scrapped the idea of the
  plugin being external.
&lt;/p&gt;
&lt;p&gt;
  The nice thing about that is that it allowed me to remove a lot of
  code on the emacs side.  Instead of communication via XML-RPC, the
  new plugin can put the content to be interpreted in a file and call
  emacsclient directly.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Security&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  I note in &lt;code&gt;README.org&lt;/code&gt; that there is a concern about security.  This
  is because any program that calls another program with
  user-generated arguments should be concerned about security.  As far
  as I can tell, the only way that something bad can happen is if
  someone creates a filename with an unmatched double-quote and
  convinces ikiwiki to accept it.  Since ikiwiki doesn&#39;t accept
  filenames with double-quotes anyway, there really shouldn&#39;t be a
  problem.
&lt;/p&gt;
&lt;p&gt;
  However, I would recommend that this plugin not be used in
  situations where untrusted people can create files (such as from the
  CGI interface), unless you personally verify that nothing bad can
  happen.  As always, this is free software and comes with no
  warranty.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Remaining todos&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I would like to get rid of the potential security hole so that
  people could feel safe running this plugin from the CGI interface.
  I would also like to get rid of the hardcoded org configuration and
  let that be stored in the user&#39;s setup file.  I have a branch that
  does that using the old architecture, so it should not be too
  difficult to port to the new architecture.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin-5/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin-5/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>More ikiwiki plugin hacking</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin-4/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin-4/"/>






	<category term="emacs" />

	<category term="ikiwiki" />

	<category term="ikiwiki-org-plugin" />

	<category term="org-mode" />

	<category term="time-series" />


	<updated>2011-12-15T18:28:05Z</updated>
	<published>2011-12-15T18:28:05Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Major progress&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Now I am able to write wikilinks to images on the local server and
  not just hosted remotely.  For example,
  &lt;a href=&quot;http://chrismgray.github.com//tags/ikiwiki-org-plugin/./../../posts/time-series-2/interest-rates.png&quot;&gt;&lt;img src=&quot;http://chrismgray.github.com//tags/ikiwiki-org-plugin/../../posts/time-series-2/interest-rates.png&quot; alt=&quot;interest-rates.png&quot;/&gt;&lt;/a&gt; is an image that I wanted to show
  at the end of &lt;a href=&quot;http://chrismgray.github.com//tags/ikiwiki-org-plugin/./../../posts/time-series-2&quot;&gt;the article on my time-series framework&lt;/a&gt;, but which I
  couldn&#39;t because the org plugin wasn&#39;t able to show images at the
  time.
&lt;/p&gt;
&lt;p&gt;
  Another bit of progress is that I finally debugged the little shell
  shim to allow it to start up the emacs daemon properly.  Now I can
  just have one emacs window running and one emacs daemon in the
  background.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Remaining TODOs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  The remaining work left to do should not be too difficult.  I have
  some of my own org customization baked into the file which would be
  better left up to the user&#39;s preferences.  I have to decide whether
  it makes more sense for the user to customize these preferences in
  the ikiwiki configuration file or just in their &lt;code&gt;.emacs&lt;/code&gt;.  The
  latter would be easier for me, but it might be easier for the user
  (especially if they have multiple wikis set up) to do it in the
  ikiwiki configuration file.
&lt;/p&gt;
&lt;p&gt;
  I also need to allow for verbatim inclusion of links.  I guess it
  makes more sense to do this in the standard org manner rather than
  the ikiwiki manner (with a backslash in front of the link).
  However, the link must be protected from ikiwiki interpreting it, so
  things might get a little complex there.
&lt;/p&gt;
&lt;p&gt;
  After those two things are completed, however, I think I&#39;m going to
  call this project done unless I hear feedback from users.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin-4/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin-4/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Lessons learned (so far) from the ikiwiki plugin</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin-3/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin-3/"/>






	<category term="emacs" />

	<category term="ikiwiki" />

	<category term="ikiwiki-org-plugin" />

	<category term="lab-notes" />

	<category term="org-mode" />


	<updated>2011-12-07T22:42:09Z</updated>
	<published>2011-12-07T22:00:36Z</published>

	<content type="html" xml:lang="en">
	
&lt;p&gt;Writing my &lt;a href=&quot;http://chrismgray.github.com//tags/ikiwiki-org-plugin/./../../posts/org-ikiwiki-plugin&quot;&gt;new plugin&lt;/a&gt; in Emacs Lisp, I learned a few things.  Here are
some of them, in no particular order.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;xml-rpc.el has some problems&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I don&#39;t mean to be unkind here.  xml-rpc.el seems pretty good if you
  are doing exactly one kind of thing: calling a method on a server
  that can be reached by http.  For anything else, it is very hard to
  use.   My plugin has the following requirements:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It must be called by another program through xml-rpc.
&lt;/li&gt;
&lt;li&gt;It must read from and write to files (and not http).
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    
  Neither of these things is made easy with xml-rpc.  The first I can
  understand &amp;ndash; xml-rpc would have to somehow insinuate itself into
  the emacs event loop and watch for calls all the time.  The second
  is less easy to understand.  Parsing xml-rpc is not really related
  to reading from http.  So why are the two things tied together?  In
  my opinion, xml-rpc.el would be a much nicer library if parsing the
  xml-rpc was separated completely from the http stuff.  There could
  be convenience functions, but they would be a layer of abstraction
  on top of the other two layers.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;xml.el has some problems&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  There isn&#39;t a function to get a list of all nodes with a given name?
  Are you kidding me?  Here is my implementation, but I bet there is a
  better one somewhere:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(defun xml-find-nodes-matching (node name)
  &quot;Returns all children of `node&#39; that have an `xml-node-name&#39; equal to `name&#39;.&quot;
  (if (or (eq node &#39;()) (not (listp node)))
      &#39;()
    (if (equal (xml-node-name node) name)
        (cons node (delq nil (mapcar (lambda (nd) (xml-find-nodes-matching nd name)) (xml-node-children node))))
      (delq nil (apply &#39;append (mapcar (lambda (nd) (xml-find-nodes-matching nd name)) (xml-node-children node)))))))
&lt;/pre&gt;


&lt;p&gt;
  In general, both xml-rpc.el and xml.el use a distressing number of
  calls to &lt;code&gt;car&lt;/code&gt;, &lt;code&gt;cdr&lt;/code&gt;, and &lt;code&gt;cdaddr&lt;/code&gt; (and all the versions in
  between).  
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Perl has some problems&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  Ikiwiki sends named parameters as an even-lengthed xml-rpc array
  rather than as an xml-rpc struct.  This is because not all of the
  functions that can be called via xml-rpc take named parameters and I
  guess Perl isn&#39;t smart enough to tell a hash from an even-lengthed
  array.  This isn&#39;t a huge problem, but it does mean that I need to
  convert the input to each of the functions that I write into a hash
  before I use it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Ikiwiki has some problems&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
  I would like to be able to ignore files that don&#39;t have a particular
  extension.  For &lt;code&gt;htmlify&lt;/code&gt;, this is the way it works by default.  It
  seems like most of the functions that plugins can implement are not
  this way by default, though, and that is a shame.  If the plugin is
  not external &amp;ndash; that is, it is written in Perl &amp;ndash; there is really no
  problem.  The function is called, checks the extension of the source
  file, and returns without doing anything.  However, when the plugin
  is external and the call must happen through xml-rpc, ikiwiki must
  transmit the data via xml-rpc and receive the returned data back via
  xml-rpc.  Unnecessary calls take a lot longer in that context.
&lt;/p&gt;
&lt;p&gt;
  So I would like for most calls to &lt;code&gt;hook&lt;/code&gt; to take an optional
  &lt;code&gt;extension&lt;/code&gt; parameter that takes an extension (or even better, a
  regexp), and only call the function if the file name has the same
  extension (or matches the regexp).
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Working with emacs buffers is pretty nice&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
  Does a function that you&#39;re trying to write in emacs lisp give you a
  string?  It&#39;s pretty easy to throw it in a temporary buffer and then
  tell emacs to do the things that you would normally do while you
  were editing in order to get the proper information out of the
  string.  The &lt;code&gt;with-temporary-buffer&lt;/code&gt; macro makes it especially easy
  to do just that.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Getting info from a structured list is easier to do as a recursive function&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;


&lt;p&gt;
  One of the things that took me the longest was to figure out what
  this couple of lines of code was doing:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(setq valtype (car (caddar xml-list))
      valvalue (caddr (caddar xml-list)))  
&lt;/pre&gt;


&lt;p&gt;
  What should the value of &lt;code&gt;xml-list&lt;/code&gt; look like in order to get the
  correct thing out of it?  It turned out that I needed to take the
  &lt;code&gt;cdr&lt;/code&gt; of the &lt;code&gt;cdaddr&lt;/code&gt; of the &lt;code&gt;caddar&lt;/code&gt; of the parsed xml in order to
  get the correct value.  That only worked when ikiwiki was responding
  to a method call, though.  I had a much easier time getting the
  right values out when I simply started using the
  &lt;code&gt;xml-find-nodes-matching&lt;/code&gt; function that I showed above.
&lt;/p&gt;
&lt;p&gt;
  When you see yourself writing more than a few &lt;code&gt;car&lt;/code&gt; or &lt;code&gt;cdr&lt;/code&gt; calls
  in a row (or &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;rest&lt;/code&gt;, or &lt;code&gt;nth&lt;/code&gt; calls in Clojure), stop and
  try to write a function that finds what you are looking for.  The
  function doesn&#39;t have to be recursive, but that might be the easiest
  way to do it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;It&#39;s nice when all calls and responses are dumped to a file&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;


&lt;p&gt;
  In a sense, this is just saying that code can be easier to debug if
  you&#39;re tracing it.  But since the calls between ikiwiki and the
  plugin must go through files anyway, we get the program traced
  automatically.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin-3/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin-3/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Updates on the ikiwiki plugin</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin-2/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin-2/"/>






	<category term="emacs" />

	<category term="ikiwiki-org-plugin" />

	<category term="org-mode" />


	<updated>2011-12-06T21:55:28Z</updated>
	<published>2011-12-06T21:55:28Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Progress&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;  
  Progress on the &lt;a href=&quot;http://chrismgray.github.com//tags/ikiwiki-org-plugin/./../../posts/org-ikiwiki-plugin&quot;&gt;plugin&lt;/a&gt; is proceeding apace.  In fact, the link in the
  last sentence is a major milestone &amp;ndash; for the first time, I can use
  what ikiwiki calls &lt;a href=&quot;http://ikiwiki.info/ikiwiki/wikilink/&quot;&gt;wikilinks&lt;/a&gt;.  What would happen previously is that
  ikiwiki would stick some raw HTML into an org file when it thought
  it saw a wikilink.  Org wouldn&#39;t know what to do with this, and
  would escape the HTML so that it would show up in the browser.  This
  is the reason that I couldn&#39;t include images in the posts &amp;ndash; they
  would get interpreted as wikilinks and then org would choke on the
  resulting HTML.
&lt;/p&gt;
&lt;p&gt;
  I&#39;m not sure that inserting local picture files works yet, but
  inserting pictures from other servers works okay.  For example, here
  is a picture of me standing at the US/Mexico border:
  &lt;img src=&quot;https://lh5.googleusercontent.com/-JiFi6diO5zM/Tgziytt-fwI/AAAAAAAACDc/dQXeYi-7odI/s144/DSCF0494.JPG&quot;  alt=&quot;https://lh5.googleusercontent.com/-JiFi6diO5zM/Tgziytt-fwI/AAAAAAAACDc/dQXeYi-7odI/s144/DSCF0494.JPG&quot; /&gt;
  and here is me after hiking to the US/Canada border:
  &lt;img src=&quot;https://lh3.googleusercontent.com/-j-b_h7_SSlo/TnyPfTGVCyI/AAAAAAAADWA/cFvVuP1QvB8/s144/DSCF0597.JPG&quot;  alt=&quot;https://lh3.googleusercontent.com/-j-b_h7_SSlo/TnyPfTGVCyI/AAAAAAAADWA/cFvVuP1QvB8/s144/DSCF0597.JPG&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  I think I have ironed out most of the kinks that caused things to
  hang previously when updating the site, but more testing is
  certainly needed.  Things that remain on my todo list include
  figuring out why it doesn&#39;t work when the emacs doing the compiling
  is daemonized, and testing whether locally hosted pictures work.
&lt;/p&gt;
&lt;p&gt;
  Any feedback would be appreciated!
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin-2/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin-2/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Plugin for org files in ikiwiki</title>

	<id>http://chrismgray.github.com//posts/org-ikiwiki-plugin/</id>

	<link href="http://chrismgray.github.com//posts/org-ikiwiki-plugin/"/>






	<category term="emacs" />

	<category term="ikiwiki" />

	<category term="ikiwiki-org-plugin" />

	<category term="org-mode" />


	<updated>2011-12-02T23:32:03Z</updated>
	<published>2011-12-02T23:29:47Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;A new plugin&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Ikiwiki users who want to write org-mode files have long only had
  one plugin for ikiwiki to convert their files to html.  That plugin
  is good as it goes, but it is somewhat limited.  Thus, I am happy to
  announce a new plugin for converting org-mode.  It is located in my
  &lt;a href=&quot;https://github.com/chrismgray/ikiwiki-org-plugin&quot;&gt;github repository&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  It is still a bit rough around the edges, but it should be
  completely usable very soon.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/org-ikiwiki-plugin/#comments" type="text/html" />


	<link rel="comments" href="/posts/org-ikiwiki-plugin/comments.atom" type="application/atom+xml" />

</entry>

</feed>
