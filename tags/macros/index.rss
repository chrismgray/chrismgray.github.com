<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged macros</title>
<link>http://chrismgray.github.com//tags/macros/</link>
<description>Hiking and Coding</description>
<item>

	<title>More Clojurescript Macros</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/cljs-macros-02/</guid>

	<link>http://chrismgray.github.com//posts/cljs-macros-02/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>macros</category>


	<pubDate>Fri, 20 Apr 2012 15:47:21 -0700</pubDate>
	<dcterms:modified>2012-04-20T23:18:48Z</dcterms:modified>

	<description>
&lt;p&gt;Most of my time this week was spent traveling and in meetings, but I
did have a chance to work on the Clojurescript macro system that I
have been working on.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Testing&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Things didn&#39;t start too well for the system, since it would not run
  the simplest of tests written for it in the Clojurescript testing
  system.  My test was a macro that would take a positive integer,
  recursively decrease it until it was zero, and then output the
  zero.  (Clearly not the smartest macro in the world &amp;ndash; it was just
  meant to test recursion.)  However, I kept getting errors saying
  that the system didn&#39;t know how to test equality among numbers.
  This seemed strange until I realized that the &lt;code&gt;extend-type&lt;/code&gt; call for
  numbers wasn&#39;t getting executed because it wasn&#39;t expanded into a
  &lt;code&gt;def&lt;/code&gt;.  (I had been executing all &lt;code&gt;def&lt;/code&gt; calls, which defined all
  functions and variables, but nothing else.)
&lt;/p&gt;
&lt;p&gt;
  So I briefly flirted with executing a bunch of other special forms,
  including &lt;code&gt;set!&lt;/code&gt; and &lt;code&gt;deftype&lt;/code&gt;, but I could see that this would make
  things pretty unwieldy, and that the compiler would be doing a lot
  of confusing things, for example trying to execute a &lt;code&gt;set!&lt;/code&gt; that was
  buried deep inside a function without being able to know anything
  about the locals that it was being set to.
&lt;/p&gt;
&lt;p&gt;
  That was clearly the way of madness, so I eventually decided to
  execute every special form that was at the top level.  This worked
  really well, and the tests started passing.
&lt;/p&gt;
&lt;p&gt;
  I also added tests to make sure that the namespaces work as
  expected.  You can &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; macros from other namespaces
  just like other functions.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;What&#39;s not there (yet)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  So far I have not added the &lt;code&gt;&amp;amp;env&lt;/code&gt; and &lt;code&gt;&amp;amp;form&lt;/code&gt; variables to macros.
  I expect that it will be necessary to add them at some point (and
  honestly not too hard).  I know they are extremely useful in some
  projects like &lt;a href=&quot;https://github.com/clojure/core.match&quot;&gt;core.match&lt;/a&gt;, but that project has already been ported
  to Clojurescript (via Clojure macros), so it might make more sense
  to leave the large macros that need those facilities to Clojure.
&lt;/p&gt;
&lt;p&gt;
  Backquoted forms don&#39;t work as nicely as in Clojure.  The reason is
  that we are using Clojure&#39;s reader, which qualifies backquoted
  symbols with their full namespace.  Unfortunately, it doesn&#39;t know
  anything about Clojurescript namespaces, so expect to need to
  qualify symbols inside backquotes.  This is an area where true
  reader macros inside Clojure would be really helpful, but we have to
  live with what we have.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;One step closer&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  &amp;hellip; to Clojure in Clojure.  Clojurescript already has a reader and a
  compiler that can compile most of itself.  The reader isn&#39;t totally
  complete &amp;ndash; it doesn&#39;t have backquote working yet for example &amp;ndash; but
  it is close.  It recently got persistent vectors and persistent
  hash-maps.  With macros added, all that&#39;s left for Clojure in
  Clojure is to finish up the reader and get rid of the calls to
  Java.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/cljs-macros-02/#comments</comments>

</item>
<item>

	<title>Clojurescript Macros</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/cljs-macros/</guid>

	<link>http://chrismgray.github.com//posts/cljs-macros/</link>


	<category>clojure</category>

	<category>clojurescript</category>

	<category>lab-notes</category>

	<category>macros</category>


	<pubDate>Tue, 10 Apr 2012 22:36:33 -0700</pubDate>
	<dcterms:modified>2012-04-11T06:33:51Z</dcterms:modified>

	<description>
&lt;p&gt;Today I wrote a proof-of-concept implementation of a macro system for
Clojurescript.  The code is &lt;a href=&quot;https://github.com/chrismgray/clojurescript/tree/defmacro&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Clojurescript already had a sort of macro system in the form of
Clojure macros, but this is different &amp;ndash; the macros are written in
Clojurescript, get compiled to JavaScript, and are evaluated by a
JavaScript interpreter.  They can be mixed in with Clojurescript code
and call Clojurescript functions.  In theory, they should work with
any Clojurescript backend that implements the REPL-related protocols
(but who knows if that&#39;s true).
&lt;/p&gt;
&lt;p&gt;
So that&#39;s the big announcement.  What follows are some implementation
details and other notes.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Implementation details&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  The macros are defined by passing strings back and forth between the
  Clojurescript compiler and the Rhino JavaScript interpreter.  The
  strings from Rhino are read by Clojure using &lt;code&gt;read-string&lt;/code&gt;, so
  macros are limited to things that can be printed by Clojurescript in
  a form that Clojure can read.
&lt;/p&gt;
&lt;p&gt;
  Macros are not yet put into the correct namespaces.  I don&#39;t think
  it will be too hard to do that correctly though.
&lt;/p&gt;
&lt;p&gt;
  Rhino is a slow beast.  It adds multiple seconds to the startup time
  of the compiler.  It might be smart to scan the file for calls to
  &lt;code&gt;defmacro&lt;/code&gt; before including the macro-interpreting code.  However,
  since macro expansion requires that all functions are defined in the
  interpreter, once a &lt;code&gt;defmacro&lt;/code&gt; is hit, all the functions in the file
  preceding it (and in all &lt;code&gt;require&lt;/code&gt;&#39;d files) must be re-parsed.
&lt;/p&gt;
&lt;p&gt;
  Existing Clojure macros should still work.  If two macros have the
  same name, the Clojurescript one will take precedence, but of course
  getting namespaces working should eliminate most conflicts.
&lt;/p&gt;
&lt;p&gt;
  It should go without saying that this is completely experimental at
  this point.  Things seem like they work to me, but they might yet
  blow up in unexpected ways.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;An example&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  Here is a simple Clojurescript file which implements the &lt;code&gt;unless&lt;/code&gt;
  macro (also known as &lt;code&gt;when-not&lt;/code&gt; in Clojure, but I think giving it a
  different name shows better that it is really not using the Clojure
  macros).
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(defmacro unless
  [pred &amp;amp; body]
  `(if (not ~pred)
     (do ~@body)
     nil))

(let [a (unless true (/ 1 0) (+ 1 1))]
  a)
&lt;/pre&gt;


&lt;p&gt;
  And here is its output:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;var a__5799 = (cljs.core.truth_(cljs.core.not.call(null,true))?(function (){(1 / 0);
return (1 + 1);
})():null);

a__5799;
&lt;/pre&gt;


&lt;p&gt;
  It&#39;s a bit ugly, but it should be obvious what&#39;s going on.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I&#39;m pretty happy with the progress so far.  It really shows how
  flexible the Clojurescript compiler is that a macro system could be
  added in under 75 lines of code, with nearly half of that being very
  lightly modified from the compiler itself.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/cljs-macros/#comments</comments>

</item>

</channel>
</rss>
