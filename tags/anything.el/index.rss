<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged anything.el</title>
<link>http://chrismgray.github.com//tags/anything.el/</link>
<description>Hiking and Coding</description>
<item>

	<title>Git Annex in Anything</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/anything-git-annex/</guid>

	<link>http://chrismgray.github.com//posts/anything-git-annex/</link>


	<category>anything.el</category>

	<category>emacs</category>

	<category>git-annex</category>


	<pubDate>Mon, 12 Dec 2011 12:03:17 -0800</pubDate>
	<dcterms:modified>2011-12-12T20:03:17Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;More fun with emacs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Lately, I&#39;ve been playing around with &lt;a href=&quot;http://www.emacswiki.org/emacs/Anything&quot;&gt;anything.el&lt;/a&gt;, which has been
  described as &quot;Quicksilver for emacs&quot;.  I&#39;ve played around with it
  before, but have had a hard time changing my habits so that it&#39;s the
  first thing I think of doing when changing buffers or finding
  files.  The main reason, I think, is that &lt;a href=&quot;http://www.emacswiki.org/emacs/IswitchBuffers&quot;&gt;iswitch&lt;/a&gt; is usually just as
  fast.
&lt;/p&gt;
&lt;p&gt;
  However, I have started using &lt;a href=&quot;http://chrismgray.github.com//tags/anything.el/./../../posts/git-annex&quot;&gt;git annex&lt;/a&gt; to store my music and
  videos, and that has added some complexity to the way that I deal
  with them.  My usual flow is to do a &lt;code&gt;git annex find&lt;/code&gt; to see what
  files I have on my laptop, after which I play one of them with
  &lt;code&gt;smplayer&lt;/code&gt;.  When I am done with the file, I either use &lt;code&gt;git annex   drop&lt;/code&gt; or &lt;code&gt;git annex move&lt;/code&gt; to get rid of the file from my laptop.
&lt;/p&gt;
&lt;p&gt;
  All of that takes a lot of typing in the shell, so I wondered
  whether I could speed it up using &lt;code&gt;anything&lt;/code&gt;.  If you guessed that I
  could (given that I am writing this article), give yourself a gold
  star.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;How I did it&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  &lt;code&gt;anything&lt;/code&gt; is highly extensible.  Anyone can define their own setup
  with a command like this:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(defun my-anything ()
  (interactive)
  (anything-other-buffer
   &#39;(anything-c-source-buffers+
     anything-c-source-recentf
     anything-c-source-files-in-current-dir+
     anything-c-source-git-annex
     anything-c-source-org-headline
     anything-c-source-bookmarks
     anything-c-source-bookmark-set
     anything-c-source-emms-files)
    &quot;*anything*&quot;))
&lt;/pre&gt;


&lt;p&gt;
  which is just a function that tells &lt;code&gt;anything&lt;/code&gt; to use a bunch of
  different &quot;sources&quot; as possible interesting things that you might
  want to interact with.  For example, &lt;code&gt;anything-c-source-recentf&lt;/code&gt;
  gives a list of files that you recently had open.  That comes with
  the &lt;code&gt;anything&lt;/code&gt; package, though, so it&#39;s not too interesting from our
  point of view.  What is interesting is
  &lt;code&gt;anything-c-source-git-annex&lt;/code&gt;.  It looks like this:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(defvar anything-c-source-git-annex
  &#39;((name . &quot;Git Annex&quot;)
    (candidates . (lambda ()
                    (with-current-buffer anything-current-buffer
                     (with-temp-buffer
                       (call-process &quot;git&quot; nil t nil &quot;annex&quot; &quot;find&quot;)
                       (goto-char (point-min))
                       (split-string (buffer-string) &quot;\n&quot;)))))
    (volatile)
    (action . ((&quot;Watch&quot; . anything-c-git-annex-play)
               (&quot;Drop&quot; . anything-c-git-annex-drop)
               (&quot;Move&quot; . anything-c-git-annex-move)
               (&quot;Copy&quot; . anything-c-git-annex-copy)))))
&lt;/pre&gt;


&lt;p&gt;
  It should hopefully be fairly easy to understand.  There are two
  interesting parts: getting candidate files, and the actions on the
  candidate files.  Getting the candidate files is as simple as
  putting the results of &lt;code&gt;git annex find&lt;/code&gt; into a temporary buffer
  (which must be in the same directory as the current buffer) and then
  putting the lines of the buffer into a list.  (This wouldn&#39;t work if
  the file names contained newlines, but I don&#39;t have any of those.
  If you wanted to be really careful, you could add the &quot;&amp;ndash;print0&quot;
  option to &lt;code&gt;call-process&lt;/code&gt; and split the string on &quot;\0&quot;.)
&lt;/p&gt;
&lt;p&gt;
  The actions are all functions.  The simplest is
  &lt;code&gt;anything-c-git-annex-drop&lt;/code&gt;, which just looks like
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(defun anything-c-git-annex-drop (candidate)
  (anything-git-annex-command &quot;drop&quot; (concat &quot;\&quot;&quot; candidate &quot;\&quot;&quot;)))
&lt;/pre&gt;


&lt;p&gt;
  where &lt;code&gt;anything-git-annex-command&lt;/code&gt; just starts a shell command.
  More interesting is &lt;code&gt;anything-c-git-annex-copy&lt;/code&gt;, which is defined as
  follows
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(defun anything-c-git-annex-copy (candidate)
  (let* ((to (anything-comp-read
              &quot;To Git Annex: &quot;
              (anything-c-git-remotes)
              :must-match nil)))
    (anything-git-annex-command &quot;copy&quot; (concat &quot;\&quot;&quot; candidate &quot;\&quot;&quot;)
                                &quot;--to&quot; (concat &quot;\&quot;&quot; to &quot;\&quot;&quot;))))

(defun anything-c-git-remotes ()
  (with-temp-buffer
    (call-process &quot;git&quot; nil (current-buffer) nil &quot;remote&quot;)
    (delete &quot;&quot; (split-string (buffer-string) &quot;\n&quot;))))
&lt;/pre&gt;


&lt;p&gt;
  The &lt;code&gt;anything-c-git-annex-copy&lt;/code&gt; command needs to know to which
  repository it should copy the candidate that has been selected.  I
  find out which one I want to copy to by listing the remotes that are
  known about by the git repository that the file is in.  Using
  &lt;code&gt;anything-comp-read&lt;/code&gt; means that the remotes are listed in the same
  style all of the &lt;code&gt;anything&lt;/code&gt; candidates are listed in.  It&#39;s pretty
  nice, because it keeps me in the same mode of operation as before.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  It&#39;s a bit hard to write about what makes &lt;code&gt;anything.el&lt;/code&gt; an
  interesting way of doing things in emacs &amp;ndash; a screencast might be
  more helpful &amp;ndash; but I hope some of the power is evident from this
  little writeup.  I&#39;m going to try to train myself to use &lt;code&gt;anything&lt;/code&gt;
  more often.  We&#39;ll see how it goes.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/anything-git-annex/#comments</comments>

</item>

</channel>
</rss>
