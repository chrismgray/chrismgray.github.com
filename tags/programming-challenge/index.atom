<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged programming-challenge</title>
<link href="http://chrismgray.github.com//tags/programming-challenge/"/>
<link href="http://chrismgray.github.com//tags/programming-challenge/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Hiking and Coding</name>

</author>




<id>http://chrismgray.github.com//tags/programming-challenge/</id>

<subtitle type="html">Hiking and Coding</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20111106">ikiwiki</generator>
<updated>2011-12-01T07:44:18Z</updated>
<entry>
	<title>The Luhnybin Challenge</title>

	<id>http://chrismgray.github.com//posts/luhnybin/</id>

	<link href="http://chrismgray.github.com//posts/luhnybin/"/>






	<category term="clojure" />

	<category term="programming-challenge" />

	<category term="thrush" />


	<updated>2011-12-01T07:44:18Z</updated>
	<published>2011-11-15T20:22:19Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Another programming challenge &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I woke up with another programming challenge in my inbox this
  morning.  This one is from &lt;a href=&quot;http://squareup.com&quot;&gt;Square&lt;/a&gt;.  They are a company that gives
  you a little device so that you can accept credit cards using a
  smart phone.  The challenge is &lt;a href=&quot;http://corner.squareup.com/2011/11/luhny-bin.html&quot;&gt;here&lt;/a&gt; &amp;ndash; basically it&#39;s about removing
  credit cards numbers from logs.  There are some details about what
  constitutes a credit card number, and how they are distinct from
  other numbers.  I won&#39;t repeat that here, but you should read it to
  understand what&#39;s coming up.
&lt;/p&gt;
&lt;p&gt;
  As usual, I implemented my solution in Clojure.  I particularly
  liked the function I called &lt;code&gt;luhn-check&lt;/code&gt;.  Here it is:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defn luhn-check
  &lt;span&gt;&quot;Takes a sequence of digits and determines whether they pass the Luhn test.&lt;/span&gt;
&lt;span&gt;   The sequence must be in order from right to left.&quot;&lt;/span&gt;
  [digits]
  (-&amp;gt;&amp;gt; digits
       (partition 2 2 (repeat 0))
       (mapcat #(vector (first %) (* 2 (second %))))
       (reduce #(+ %1 (int (/ %2 10)) (int (mod %2 10))))
       (#(mod % 10))
       (= 0)))
&lt;/pre&gt;




&lt;p&gt;
  I think this is a good illustration of the &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; operator in
  Clojure, which is also called the &quot;thrush&quot; operator.  Basically,
  this operator can be thought of as taking the result from one
  expression and putting it at the end of the next expression.
&lt;/p&gt;
&lt;p&gt;
  In this case, we start out with a list of digits.  We then partition
  them into pairs, padding with a zero if necessary.  We then take the
  pairs and double the second number in the pair, concatenating all
  the pairs back into a single list.  We then sum up all the digits in
  the list, using the &lt;code&gt;reduce&lt;/code&gt; function.  This leaves us with a
  number.  We get its value \(\mod 10\) and test whether it is equal
  to zero.  If it is, we return &lt;code&gt;true&lt;/code&gt;, otherwise we return &lt;code&gt;false&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  All of this could be written with nested expressions (and the thrush
  operator is simply a macro that rewrites what you see as nested
  expressions), but I think the way it is written nicely shows what
  the data is doing in the function.
&lt;/p&gt;
&lt;p&gt;
  Anyway, I don&#39;t know if this solution will get me a job, but it was
  a bit of fun coding and didn&#39;t take too long.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/luhnybin/#comments" type="text/html" />


	<link rel="comments" href="/posts/luhnybin/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Time Series 2</title>

	<id>http://chrismgray.github.com//posts/time-series-2/</id>

	<link href="http://chrismgray.github.com//posts/time-series-2/"/>






	<category term="clojure" />

	<category term="programming-challenge" />

	<category term="time-series" />


	<updated>2011-12-01T07:43:58Z</updated>
	<published>2011-11-13T14:12:16Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;What we have so far &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Well, yesterday was either a very productive day or a very lucky day
  for me.  I read up on monads &amp;ndash; I found that &lt;a href=&quot;http://onclojure.com/2009/03/05/a-monad-tutorial-for-clojure-programmers-part-1/&quot;&gt;khinsen&#39;s tutorials&lt;/a&gt; and
  &lt;a href=&quot;http://intensivesystems.s3-website-us-east-1.amazonaws.com/tutorials/monads_101.html&quot;&gt;Jim Duey&#39;s tutorials&lt;/a&gt; complemented each other nicely.  Then I went
  for a long run (about 18 miles I think) and let the ideas sink in.
  When I got home, I found &lt;code&gt;state-m&lt;/code&gt; and &lt;code&gt;m-seq&lt;/code&gt; and the job was
  almost done.
&lt;/p&gt;
&lt;p&gt;
  Just as a reminder, &lt;a href=&quot;http://chrismgray.github.com/posts/time-series-1&quot;&gt;yesterday&#39;s task&lt;/a&gt; was to build a time-series
  framework where a function \(f\) accepts the previous \(n\) outputs of
  \(f\) as input to generate a new output.  Here is my solution, edited
  for clarity (the actual solution is in a &lt;a href=&quot;http://github.com/chrismgray/time-series&quot;&gt;github repository&lt;/a&gt;):
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defn time-series [f init-state n num-iterations]
 (let [call-f (fn [state]
                (let [retval (f state)
                      num (count state)
                      new-state (vec (if (= num n) (drop 1 (conj state retval)) (conj state retval)))]
                  [retval new-state]))]
   ((with-monad state-m
      (m-seq (repeat num-iterations call-f)))
    (vector init-state))))
&lt;/pre&gt;




&lt;p&gt;
  As you can see, the heavy lifting is done by the &lt;code&gt;state&lt;/code&gt; monad and
  by &lt;code&gt;m-seq&lt;/code&gt;.  What do they do?  Well, &lt;code&gt;m-seq&lt;/code&gt; can be thought of as
  taking a list of functions and calling them in order, returning a
  list of their return values.  The list of functions in this case is
  the same function (&lt;code&gt;call-f&lt;/code&gt;) over and over.  All &lt;code&gt;call-f&lt;/code&gt; does is
  call \(f\) and change the state.
&lt;/p&gt;
&lt;p&gt;
  It might appear that &lt;code&gt;call-f&lt;/code&gt; is an \(O(n)\) function.  After all, we
  call &lt;code&gt;count&lt;/code&gt; on the state, which is a vector of at most \(n\)
  elements.  However, almost all the behind-the-scenes data structures
  that Clojure uses (including the vector data structure) are
  guaranteed to have \(O(1)\) performance for calling &lt;code&gt;count&lt;/code&gt;.  So
  that&#39;s nice, and &lt;code&gt;call-f&lt;/code&gt; has the performance characteristics that I
  desired.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Monads &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  They&#39;re still a slightly confusing and magical-seeming thing to me,
  but monads have some obvious utility.  I guess the way to think
  about them is that if you put your input and output in a common
  format, then they aid you in stringing functions together very
  easily.  I used them in this case to encapsulate state, and that is
  probably the most common use of them in Clojure (judging by the
  number of state functions in the Clojure monads library).  However,
  I think I should probably try to understand all the monads in the
  library and know how to combine them.
&lt;/p&gt;
&lt;p&gt;
  I could have written the function above without monads, but the code
  would not have been nearly as concise, and there probably would have
  been many more edge-cases to consider.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;The rest &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I also wrote some stuff to make debugging easier, and used incanter
  to compare multiple time series.  However, neither required me to
  bend my brain as much as monads, so I won&#39;t talk about them very
  much.  In fact, not at all, because that is the end of my post.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/time-series-2/#comments" type="text/html" />


	<link rel="comments" href="/posts/time-series-2/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Time Series</title>

	<id>http://chrismgray.github.com//posts/time-series-1/</id>

	<link href="http://chrismgray.github.com//posts/time-series-1/"/>






	<category term="clojure" />

	<category term="programming-challenge" />

	<category term="time-series" />


	<updated>2011-12-01T07:43:43Z</updated>
	<published>2011-11-12T16:27:15Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Programming challenges &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  One of the interesting aspects of looking for a job this time around
  is that most of the companies that I have applied at have asked me
  to do a programming challenge as a kind of weed-out step.  It has
  been fun and a good way of keeping in practice.  In fact, I have
  resolved to learn at least one new feature of the programming
  language that I am using for each one.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Time series framework &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  My latest programming challenge is to build a framework for &lt;a href=&quot;http://en.wikipedia.org/wiki/Time_series&quot;&gt;time series&lt;/a&gt; generation.  The framework will take a function \(f\) that
  looks at the \(n\) previous timesteps and returns the next timestep.
  The other goals are:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Efficiency

&lt;p&gt;    
    Adding a new timestep should be a \(O(1)\) operation.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Ease of debugging

&lt;p&gt;    
    If an error occurs in computing the next timestep, the stack trace
    should be easily comprehensible and show the current state of the
    time series.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Traceability

&lt;p&gt;    
    It should be possible to see the differences between two different
    functions.  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Ideas so far &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  This seems like the perfect time to learn about &lt;a href=&quot;http://onclojure.com/2009/03/05/a-monad-tutorial-for-clojure-programmers-part-1/&quot;&gt;monads&lt;/a&gt;.  Yikes!
  I&#39;ve tried before, but have never seen a practical use for them.  As
  far as I understand so far, they should be very good for storing the
  state (&lt;i&gt;i.e.&lt;/i&gt; the previous \(n\) timesteps).
&lt;/p&gt;
&lt;p&gt;
  A simpler solution might be just to use lazy sequences.  There&#39;s not
  much to such a solution, so I might just implement it first and then
  try to replicate it with monads.  In this solution, the previous \(n\)
  timesteps are simply the last \(n\) elements of the lazy sequence.
  Getting those elements might be tough to do in constant time, but I
  have a feeling it&#39;s possible.
&lt;/p&gt;
&lt;p&gt;
  On the debugging front, there shouldn&#39;t be too much complexity: it
  should just be a combination of &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;throw&lt;/code&gt;.
  There&#39;s also &lt;code&gt;clojure.stacktrace&lt;/code&gt; if I want to get even fancier.
&lt;/p&gt;
&lt;p&gt;
  As far as tracing goes, I might have a look at &lt;code&gt;tools.trace&lt;/code&gt; to see
  if there&#39;s anything interesting there that I can use.  I think that
  monads might provide another way of doing the same thing.  We&#39;ll see
  which is simpler.  It might also be nice to use &lt;a href=&quot;http://incanter.org&quot;&gt;incanter&lt;/a&gt; to display
  the differences between two (or more) different functions.
&lt;/p&gt;
&lt;p&gt;
  On to the coding!
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/time-series-1/#comments" type="text/html" />


	<link rel="comments" href="/posts/time-series-1/comments.atom" type="application/atom+xml" />

</entry>

</feed>
