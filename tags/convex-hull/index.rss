<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>pages tagged convex-hull</title>
<link>http://chrismgray.github.com//tags/convex-hull/</link>
<description>Hiking and Coding</description>
<item>

	<title>convex-hulls</title>


	<guid isPermaLink="false">http://chrismgray.github.com//posts/convex-hulls/</guid>

	<link>http://chrismgray.github.com//posts/convex-hulls/</link>


	<category>clojure</category>

	<category>computational-geometry</category>

	<category>convex-hull</category>

	<category>ikiwiki</category>

	<category>lab-notes</category>


	<pubDate>Wed, 30 Nov 2011 11:06:31 -0700</pubDate>
	<dcterms:modified>2011-11-30T22:11:42Z</dcterms:modified>

	<description>&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Convex Hulls Three Ways &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Whenever I watch cooking competition shows, they always have chefs
  presenting a foodstuff cooked in multiple different ways.  Today,
  I&#39;m doing that with algorithms.
&lt;/p&gt;
&lt;p&gt;
  The algorithm in question today is the convex hull algorithm.  In
  order of implementation complexity, and descending order of
  theoretical running time, there is the Jarvis March, Graham&#39;s Scan,
  and Chan&#39;s Algorithm.  All three are implemented in Clojure in my
  &lt;a href=&quot;https://github.com/chrismgray/convex-hull&quot;&gt;github repository&lt;/a&gt;.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;Jarvis March &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;


&lt;p&gt;
   The simplest of the algorithms, the Jarvis March was also one of
   the first output-sensitive computational geometry algorithms.  In a
   nutshell, you first find a point that you know to be on the convex
   hull, and then you find the next point by looking at all the rest
   of the points and determining which one has a segment that has the
   property that all the rest of the points are on one side of it.
   You repeatedly find the next point using this procedure until you
   get back to the first point.  There is basically no way to
   implement this algorithm that does not have a running time of
   \(O(hn)\), where \(h\) is the number of points on the convex hull
   and \(n\) is the number of input points.
&lt;/p&gt;
&lt;p&gt;
   The one implementation detail of the Jarvis March that is
   interesting is that whenever you see the concept of &quot;finding the
   next thing&quot; given some previous information, the Clojure
   implementation should almost always be lazy.  It turns out that
   implementing Jarvis March lazily will help in implementing Chan&#39;s
   Algorithm, so keep that in mind.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Graham&#39;s Scan &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;


&lt;p&gt;
   Graham&#39;s Scan is one of the algorithms I remember most vividly from
   the undergraduate computational geometry course that I took.  The
   professor, Godfried Toussaint, always referred to it as the &quot;three
   coins&quot; algorithm, so I have kept up that tradition in some of my
   function names in my implementation.
&lt;/p&gt;
&lt;p&gt;
   The algorithm first makes a polygon of the input points by sorting
   them by angle about the bottom-most point.  Then it goes around the
   polygon with a stack, pushing and popping points as it goes.  If
   that sounds familiar, it should &amp;ndash; it&#39;s the same idea as what I was
   talking about when I brought up the idea of &lt;a href=&quot;http://chrismgray.github.com/posts/parsing-polygons/&quot;&gt;parsing polygons&lt;/a&gt; a week
   and a half ago. 
&lt;/p&gt;
&lt;p&gt;
   Thus, I used the same polygon-parsing monad in my implementation as
   when I computed the visibility polygons last week.  It still works
   just as well.
&lt;/p&gt;
&lt;p&gt;
   Since the points must be sorted, Graham&#39;s Scan takes \(\Theta(n
   \log n)\).  Sorting can be reduced to computing convex hulls, so
   computing convex hulls has a \(\Omega(n \log n)\) lower bound,
   meaning that this algorithm is optimal.
&lt;/p&gt;
&lt;p&gt;
   But Chan&#39;s algorithm is better.  Weird huh?
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Chan&#39;s Algorithm &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;


&lt;p&gt;
   I must confess that I had always been a little intimidated by
   Chan&#39;s Algorithm.  It was invented by Timothy Chan, who has a
   well-earned reputation for being a genius, so I thought it would be
   really complicated.  It&#39;s not.  There is a decent &lt;a href=&quot;http://en.wikipedia.org/wiki/Chan&amp;#39;s_algorithm&quot;&gt;description&lt;/a&gt; of it
   on Wikipedia, so I won&#39;t go into the details.  The gist is that you
   combine the two previous algorithms that I discussed.  The Jarvis
   March needs to be modified so that the points can be input as a
   list of smaller convex hulls, and the next point on the convex hull
   is found by doing a binary search on the smaller convex hulls.  But
   that is really the hardest part about the algorithm.  I have put
   the whole thing below, because I think it&#39;s pretty beautiful.
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defn chans-algorithm
  &lt;span&gt;&quot;Finds the convex hull of a set of points by&lt;/span&gt;
&lt;span&gt;   the algorithm known as &#39;Chan&#39;s Algorithm&#39;.&quot;&lt;/span&gt;
  [pts]
  (let [bottom-pt (apply min-key :y pts)]
   (loop [m 3] ; start out with triangles
     (let [partitioned-pts (partition m m [] pts)
           c-hs (map grahams-scan partitioned-pts)
           potential-ch (take m (apply jarvis-march pts c-hs))]
       (if (= bottom-pt (last potential-ch)) ; assumes jarvis-march returns bottom-pt last
         potential-ch
         (recur (min (* m m) (count pts))))))))
&lt;/pre&gt;




&lt;p&gt;
   The great thing about Chan&#39;s Algorithm is that it is also
   output-sensitive.  But instead of being \(O(nh)\) (which is
   \(O(n^2)\) in the worst case), it is \(O(n \log h)\), which is at
   least as good as Graham&#39;s Scan, but often better.  It is also quite
   simple to implement, given decent implementations of Jarvis March
   and Graham&#39;s Scan.  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Conclusion &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  Convex hull algorithms are great.  If I was ever to teach a
  computational geometry course (admittedly that&#39;s looking like a long
  shot now), I might start and finish the course with them.  The
  progression from the ultra-simple Jarvis March to the
  more-complicated Chan&#39;s Algorithm is really nice, and there are
  interesting new things to talk about the whole way.  They also show
  that computational geometry is not so hard to do in a functional
  style.  In fact, using laziness is what makes the implementation of
  Chan&#39;s Algorithm so simple.  So this might make a nice talk to give
  people who are already into functional programming as well.
&lt;/p&gt;
&lt;p&gt;
  The next thing I have in mind for this project is to animate the
  algorithms.  Viewing the output of algorithms is already pretty easy
  using Processing, but I would like to be able to see them as they
  are operating.  It would be great if I could do that without
  changing the code too much.  I have a couple of ideas, but I&#39;m not
  sure if they&#39;ll work yet.
&lt;/p&gt;
&lt;p&gt;
  Also, it is slightly embarrassing to admit, but my blogging system
  seems to not support putting images in posts.  So I am going to have
  to figure out how to work around (or even fix) that before I can
  show any results.
&lt;/p&gt;






&lt;/div&gt;
&lt;/div&gt;
</description>


	<comments>/posts/convex-hulls/#comments</comments>

</item>

</channel>
</rss>
