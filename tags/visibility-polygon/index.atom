<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged visibility-polygon</title>
<link href="http://chrismgray.github.com//tags/visibility-polygon/"/>
<link href="http://chrismgray.github.com//tags/visibility-polygon/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Hiking and Coding</name>

</author>




<id>http://chrismgray.github.com//tags/visibility-polygon/</id>

<subtitle type="html">Hiking and Coding</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20111106">ikiwiki</generator>
<updated>2011-11-22T21:06:52Z</updated>
<entry>
	<title>processing</title>

	<id>http://chrismgray.github.com//posts/processing/</id>

	<link href="http://chrismgray.github.com//posts/processing/"/>






	<category term="clojure" />

	<category term="lab-notes" />

	<category term="processing" />

	<category term="visibility-polygon" />


	<updated>2011-11-22T21:06:52Z</updated>
	<published>2011-11-22T19:29:29Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Viewing visibility polygons &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I mentioned yesterday that it would be nice to see the output of my
  visibility polygon solution.  To that end, I created an extremely
  simple drawing editor using &lt;a href=&quot;http://processing.org/&quot;&gt;Processing&lt;/a&gt;.  I have to say, I loved it.
&lt;/p&gt;
&lt;p&gt;
  The most important feature to me is the extreme interactivity.  I
  can change functions extremely quickly with my tools &amp;ndash; redefining a
  Clojure function is either one or two keystrokes in emacs, depending
  how I choose to do it &amp;ndash; so I like a graphics environment that
  changes just as quickly.  This is what Processing, and in particular
  &lt;code&gt;clj-processing&lt;/code&gt;, offers.  I was able to define a function that
  draws the various objects (in this case, the polygon, the point
  where the mouse is, and the visibility polygon of the mouse point
  inside the polygon).  If I wanted to make any changes to this
  function &amp;ndash; for example, changing the color of the point where the
  mouse is &amp;ndash; I can simply redefine the function using my emacs tools
  and the change shows up immediately on the drawing.
&lt;/p&gt;
&lt;p&gt;
  I was able to use this to find a couple of minor bugs in my
  visibility-polygon-finding code, but in general, it worked really
  well on the first try.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;Shortcomings &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;


&lt;p&gt;
   There were a couple of things that slightly bothered me about
   &lt;code&gt;clj-processing&lt;/code&gt;.  First, it used quite a lot of CPU just to
   display a simple polygon without too many points.  I am probably
   using it rather na√Øvely, so it is possible that this is my problem
   and not the problem of &lt;code&gt;clj-processing&lt;/code&gt;.  However, the second
   problem is just that &lt;code&gt;clj-processing&lt;/code&gt; is showing its age.  I think
   it was probably one of the first Clojure libraries out there and
   much of the coding style hasn&#39;t evolved with the Clojure best
   practices that people use.  For example, some of the features do
   not work if you only &lt;code&gt;require&lt;/code&gt; the library &amp;ndash; you must &lt;code&gt;use&lt;/code&gt; it.  I
   try to only &lt;code&gt;require&lt;/code&gt; libraries, to avoid my namespace becoming
   overly populated, so it is frustrating when that doesn&#39;t work.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Going forward &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  I need to clean up the code a bit before I can put it up on github,
  but it should be there soon.  It currently needs me to explicitly
  call the function in order to find the visibility polygon.  I would
  really like it to find the visibility polygon of any point where the
  mouse is inside the polygon.  However, determining if a point is
  inside a non-convex polygon tends to be a bit harder than it
  sounds.  You can shoot a ray in one direction from a point, and
  count the number of polygon edges that it crosses &amp;ndash; if it&#39;s even
  you are outside and if it&#39;s odd you are inside &amp;ndash; but what happens
  if the ray crosses a vertex?  There was a good experimental paper on
  this problem at a recent EuroCG.
&lt;/p&gt;
&lt;p&gt;
  So that&#39;s a slightly non-trivial problem.  I also coded an
  implementation of the Voronoi Diagram problem recently.  I should
  add a Processing UI to that as well.  I have a feeling that would be
  the easier task to do next, and I would surely discover some bugs in
  it while I did.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/processing/#comments" type="text/html" />


	<link rel="comments" href="/posts/processing/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>visibility-polygon</title>

	<id>http://chrismgray.github.com//posts/visibility-polygon/</id>

	<link href="http://chrismgray.github.com//posts/visibility-polygon/"/>






	<category term="clojure" />

	<category term="computational-geometry" />

	<category term="lab-notes" />

	<category term="visibility-polygon" />


	<updated>2011-11-21T19:58:03Z</updated>
	<published>2011-11-21T19:44:43Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Visibility Polygon &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I&#39;ve put up some preliminary code for finding visibility polygons on
  my &lt;a href=&quot;https://github.com/chrismgray/visibility-polygon&quot;&gt;github repo&lt;/a&gt;.  I have only tested it with one polygon, but so far
  things are looking good.  My idea from yesterday of using monads to
  &quot;parse&quot; the polygon seems to be paying off.  Here is the relevant
  code:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defn- add-new-pt [poly]
  (fn [pt stack]
    (when (or (empty? stack) ; First two points are guaranteed to be visible
              (empty? (rest stack))
              (visible? pt (first poly) (first stack)))
      [pt (rest poly) (cons (first poly) stack)])))

(defn- pop-stack [poly]
  (fn [pt stack]
    (let [the-seg (seg/new-seg pt (first poly))
          top-seg (seg/new-seg (first stack) (second stack))]
      (when (pt/left-turn? (second stack) (first stack) (first poly))
        (if (seg/intersection-on-seg? the-seg top-seg)
          [pt poly (cons (seg/intersection the-seg top-seg) stack)]
          [pt poly (rest stack)])))))

(defn- skip-pt [poly]
  (fn [pt stack]
   (let [the-seg (seg/new-seg pt (first stack))
         poly-seg (seg/new-seg (first poly) (second poly))]
     (when (not (pt/left-turn? (second stack) (first stack) (first poly)))
       (if (seg/intersection-on-seg? the-seg poly-seg)
         [pt (cons (seg/intersection the-seg poly-seg) (rest poly)) stack]
         [pt (rest poly) stack])))))

(defn- all-conditions [poly]
  (with-monad polygon-parser-m
    (m-plus (add-new-pt poly) (pop-stack poly) (skip-pt poly))))
&lt;/pre&gt;




&lt;p&gt;
  This defines three actions to be performed when the polygon and
  stack are in certain configurations.  The first executes when the
  next point on the polygon doesn&#39;t obscure any of the stack.  In that
  case, it removes the point from &lt;code&gt;poly&lt;/code&gt; and puts it on &lt;code&gt;stack&lt;/code&gt;.  The
  second executes by popping points off the stack until the next point
  on the polygon no longer obscures the stack.  The final condition
  activates when the next point on the polygon is hidden by the
  stack.  It skips the points of &lt;code&gt;poly&lt;/code&gt; until it finds one that would
  be visible.  We combine the three conditions using &lt;code&gt;m-plus&lt;/code&gt;, which
  is defined to try the conditions in order until one returns
  something that is not &lt;code&gt;nil&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Is this solution any better than a functional programming solution
  without monads?  I think it is.  First, the conditions are easy to
  see and very explicitly laid out.  Using a &lt;code&gt;cond&lt;/code&gt; to accomplish the
  same thing is certainly possible, but gets more complicated as the
  number of conditions grows.  Also, we are explicitly managing state
  in this solution.  Doing so in an ad-hoc manner would be much more
  difficult.  In fact, I am not really sure how I would loop until
  there are no more points in &lt;code&gt;poly&lt;/code&gt; in a solution without monads
  (especially since not all the conditions consume a point from
  &lt;code&gt;poly&lt;/code&gt;).  With monads, it is quite simple:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(defn- visibility-polygon-helper [pt poly]
  ((with-monad polygon-parser-m
     (m-until empty? all-conditions poly)) pt []))
&lt;/pre&gt;




&lt;p&gt;
  Doing something like that with a &lt;code&gt;reduce&lt;/code&gt; seems like it would veer
  off into unreadability fairly quickly.
&lt;/p&gt;
&lt;p&gt;
  Are there downsides to this solution?  I think there is at least
  one.  That is, the conditions must be functions that return functions.
  This makes them a bit more confusing than they really should be.  I
  needed to do this so that I could have a test in the &lt;code&gt;m-until&lt;/code&gt;
  function above.  On the whole, though, this is a fairly cosmetic
  gripe, and can be hidden by using helper functions like the one
  above.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;On the horizon &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  I would like to test the code quite a bit more.  However, doing so
  by drawing out polygons by hand and then figuring out their
  visibility polygons is quite tedious.  Therefore, I need some sort
  of GUI to be able to draw polygons and then I will be able to
  see whether the computed visibility polygon makes sense.
&lt;/p&gt;
&lt;p&gt;
  I am thinking that it might be nice to use the &lt;a href=&quot;https://github.com/rosado/clj-processing&quot;&gt;&lt;code&gt;clj-processing&lt;/code&gt; library&lt;/a&gt; to do this.  Unfortunately, that library is currently only
  using Clojure 1.2.  Since I am using Clojure 1.3, that might be a
  problem.  So I might need to do some porting from 1.2 to 1.3.
  However, doing so should give me a good idea of how processing
  works, and could give a nice tool for more interactive geometry
  programs. 
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/visibility-polygon/#comments" type="text/html" />


	<link rel="comments" href="/posts/visibility-polygon/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>parsing-polygons</title>

	<id>http://chrismgray.github.com//posts/parsing-polygons/</id>

	<link href="http://chrismgray.github.com//posts/parsing-polygons/"/>






	<category term="computational-geometry" />

	<category term="lab-notes" />

	<category term="visibility-polygon" />


	<updated>2011-11-21T01:16:32Z</updated>
	<published>2011-11-21T00:58:28Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Functional programming &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I&#39;ve gotten a bit obsessed by functional programming over the last
  couple of years.  I have even seriously thought about writing a book
  that looks at computational geometry (which is the subject in which
  I was trained) in the light of functional programming.  Most of the
  standard computational-geometry texts these days approach the
  writing of code from an imperative standpoint.
&lt;/p&gt;
&lt;p&gt;
  I think functional programming is a good way to think about
  computational geometry for a couple of reasons.  First, most
  problems in computational geometry can be expressed in a purely
  functional manner.  That is, the answers to the problems are usually
  the same given the same inputs.  Secondly, I have bought into the
  idea that parallel and distributed computing are much easier when
  state is not being modified.  Functional programming forces you to
  think this way.  While many problems in computational geometry are
  inherently sequential, not all of them are.  Using a programming
  method that allows for the easy addition of more cores seems like a
  good practice when a problem is encountered that is easily made
  parallel. 
&lt;/p&gt;
&lt;p&gt;
  One of the things I have been thinking about as a final chapter for
  the book that I would like to write is the introduction of monads as
  a way to &quot;parse&quot; polygons.  Monads are commonly used (well, commonly
  in the functional programming world) to parse strings.  They
  generally scan through with the aid of a stack.  There are many
  algorithms that scan through the points of a polygon with a stack --
  the example that I have thought about the most is the visibility
  polygon.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Visibility polygons &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  A &lt;i&gt;visibility polygon&lt;/i&gt; is the subset of a polygon that can be &quot;seen&quot;
  from a point inside the polygon.  Here, we regard the segments of
  the polygon as opaque walls.
&lt;/p&gt;
&lt;p&gt;
  The standard algorithm for computing the visibility polygon is not
  too difficult to implement in an imperative language.  In fact, I
  &lt;a href=&quot;http://www.win.tue.nl/~cgray/ipelets.html&quot;&gt;implemented&lt;/a&gt; it already in C++ for the drawing editor &lt;a href=&quot;http://tclab.kaist.ac.kr/ipe/&quot;&gt;ipe&lt;/a&gt;.  (Though I
  think that code is now obsolete since the release of ipe 7.)
&lt;/p&gt;
&lt;p&gt;
  I&#39;ve already tipped my hand at how I would think about implementing
  such an algorithm in a functional language.  I would use a variant
  of a monadic parser to go through the polygon and find the parts
  that are visible.  (That last sentence doesn&#39;t give much of a hint
  about how it&#39;s done, but the whole algorithm would take too much
  space to describe.  Suffice it to say that a stack is kept with the
  &quot;currently visible&quot; portion of the polygon always on the stack.)
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Monads &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I used monads &lt;a href=&quot;http://chrismgray.github.com/posts/time-series-2/&quot;&gt;earlier&lt;/a&gt; to make a framework for creating and comparing
  time-series.  However, I only used a monad that was already defined
  by someone else.  I think I might need to define a monad on my own
  this time &amp;ndash; a slightly daunting idea.  I definitely need to read
  the rest of &lt;a href=&quot;http://intensivesystems.s3-website-us-east-1.amazonaws.com/tutorials/monads_201.html&quot;&gt;Jim Duey&#39;s tutorial&lt;/a&gt; to make sense of how to do it.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/parsing-polygons/#comments" type="text/html" />


	<link rel="comments" href="/posts/parsing-polygons/comments.atom" type="application/atom+xml" />

</entry>

</feed>
