<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged thrush</title>
<link href="http://chrismgray.github.com//tags/thrush/"/>
<link href="http://chrismgray.github.com//tags/thrush/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Hiking and Coding</name>

</author>




<id>http://chrismgray.github.com//tags/thrush/</id>

<subtitle type="html">Hiking and Coding</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20120202">ikiwiki</generator>
<updated>2012-01-07T02:23:15Z</updated>
<entry>
	<title>Two Small Clojure Packages</title>

	<id>http://chrismgray.github.com//posts/small-clojure-libs/</id>

	<link href="http://chrismgray.github.com//posts/small-clojure-libs/"/>






	<category term="clojure" />

	<category term="lab-notes" />

	<category term="lru-maps" />

	<category term="thrush" />


	<updated>2012-01-07T02:23:15Z</updated>
	<published>2012-01-07T02:23:15Z</published>

	<content type="html" xml:lang="en">
	
&lt;p&gt;I&#39;ve been working on a larger project lately, but in doing so I found
two little things that were independent of the project and useful
enough for me to release as Clojure packages.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Parallel Thrush&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I discussed the Clojure &lt;a href=&quot;http://chrismgray.github.com//tags/thrush/./../../posts/luhnybin&quot;&gt;thrush operator&lt;/a&gt; once before.  The way that I
  have been using it lately is to operate on a stream of data, perhaps
  condensing the stream at the end into one value.  This suggested to
  me that I should be able to operate on the stream of data in
  parallel, since all of the functions that I am using are pure.
&lt;/p&gt;
&lt;p&gt;
  What I have done with the new package is to create a new macro
  called &lt;code&gt;||-&amp;gt;&amp;gt;&lt;/code&gt;.  This operates just like the &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; macro already in
  Clojure, except that it splits the data in the stream and runs it in
  parallel.  Behind the scenes, it uses the Clojure &lt;code&gt;pmap&lt;/code&gt; function,
  which advises that it should only be used when the operation being
  done is CPU-intensive enough to exceed the coordination cost.  Since
  multiple functions are put together by my macro before they are
  passed to &lt;code&gt;pmap&lt;/code&gt;, following this advice should become easier.
&lt;/p&gt;
&lt;p&gt;
  As an example:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(||-&amp;gt;&amp;gt; data
       (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;map&lt;/span&gt; big-function)
       (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;filter&lt;/span&gt; odd?)
       &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:merge&lt;/span&gt;
       (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;reduce&lt;/span&gt; +))
&lt;/pre&gt;


&lt;p&gt;
  is the same as
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #8cd0d3;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; data
     (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;map&lt;/span&gt; big-function)
     (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;filter&lt;/span&gt; odd?)
     (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;reduce&lt;/span&gt; +))
&lt;/pre&gt;


&lt;p&gt;
  but everything before the &lt;code&gt;:merge&lt;/code&gt; statement is executed in
  parallel.
&lt;/p&gt;
&lt;p&gt;
  Of course, the source is on &lt;a href=&quot;https://github.com/chrismgray/parallel-thrush&quot;&gt;my github&lt;/a&gt;.  The jar can also be easily
  downloaded from &lt;a href=&quot;https://clojars.org/parallel-thrush&quot;&gt;clojars&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;LRU maps&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  The project I&#39;ve been working on has partly been a struggle to
  manage resources.  Thus, I&#39;ve needed a good way to keep some of the
  resources in memory and get rid of the ones that are no longer
  relevant.  Using a &lt;code&gt;hash-map&lt;/code&gt; data structure is always nice, so I&#39;ve
  implemented a variant of a &lt;code&gt;hash-map&lt;/code&gt; that has an upper limit on its
  size.  When you try to add an element that would cause the map to
  have too many elements, it kicks out the element that was least
  recently added or modified.
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf;&quot;&gt;apply&lt;/span&gt; lru-map 4 (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;range&lt;/span&gt; 20))
&lt;span style=&quot;color: #708070;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;=&amp;gt; {12 13, 14 15, 16 17, 18 19}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;
  Sometimes, you want to do something with an element as it gets
  kicked out.  For that, there is &lt;code&gt;lru-map-with&lt;/code&gt;.  This takes two
  extra arguments &amp;ndash; a function that operates on some &quot;state&quot; and the
  element that is getting kicked out and the initial &quot;state&quot;.  (Behind
  the scenes, this &quot;state&quot; isn&#39;t really state, but it is helpful to
  think of it as state.)
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf;&quot;&gt;apply&lt;/span&gt; lru-map-with 4 conj [] (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;range&lt;/span&gt; 20))
&lt;span style=&quot;color: #708070;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;=&amp;gt; {12 13, 14 15, 16 17, 18 19, :lru-state [[0 1] [2 3] [4 5] [6 7] [8 9] [10 11]]}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;
  Again, this little package is on &lt;a href=&quot;https://github.com/chrismgray/least-recently-used-map&quot;&gt;github&lt;/a&gt; and the jar is on &lt;a href=&quot;https://clojars.org/least-recently-used-map&quot;&gt;clojars&lt;/a&gt;.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/small-clojure-libs/#comments" type="text/html" />


	<link rel="comments" href="/posts/small-clojure-libs/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>The Luhnybin Challenge</title>

	<id>http://chrismgray.github.com//posts/luhnybin/</id>

	<link href="http://chrismgray.github.com//posts/luhnybin/"/>






	<category term="clojure" />

	<category term="programming-challenge" />

	<category term="thrush" />


	<updated>2011-12-01T07:44:18Z</updated>
	<published>2011-11-15T20:22:19Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Another programming challenge&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I woke up with another programming challenge in my inbox this
  morning.  This one is from &lt;a href=&quot;http://squareup.com&quot;&gt;Square&lt;/a&gt;.  They are a company that gives
  you a little device so that you can accept credit cards using a
  smart phone.  The challenge is &lt;a href=&quot;http://corner.squareup.com/2011/11/luhny-bin.html&quot;&gt;here&lt;/a&gt; &amp;ndash; basically it&#39;s about removing
  credit cards numbers from logs.  There are some details about what
  constitutes a credit card number, and how they are distinct from
  other numbers.  I won&#39;t repeat that here, but you should read it to
  understand what&#39;s coming up.
&lt;/p&gt;
&lt;p&gt;
  As usual, I implemented my solution in Clojure.  I particularly
  liked the function I called &lt;code&gt;luhn-check&lt;/code&gt;.  Here it is:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;luhn-check&lt;/span&gt;
  &lt;span style=&quot;color: #8fb28f;&quot;&gt;&quot;Takes a sequence of digits and determines whether they pass the Luhn test.&lt;/span&gt;
&lt;span style=&quot;color: #8fb28f;&quot;&gt;   The sequence must be in order from right to left.&quot;&lt;/span&gt;
  [digits]
  (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; digits
       (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;partition&lt;/span&gt; 2 2 (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;repeat&lt;/span&gt; 0))
       (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;mapcat&lt;/span&gt; #(&lt;span style=&quot;color: #f0dfaf;&quot;&gt;vector&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; %) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;*&lt;/span&gt; 2 (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;second&lt;/span&gt; %))))
       (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;reduce&lt;/span&gt; #(&lt;span style=&quot;color: #f0dfaf;&quot;&gt;+&lt;/span&gt; %1 (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;int&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;/&lt;/span&gt; %2 10)) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;int&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;mod&lt;/span&gt; %2 10))))
       (#(&lt;span style=&quot;color: #f0dfaf;&quot;&gt;mod&lt;/span&gt; % 10))
       (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;=&lt;/span&gt; 0)))
&lt;/pre&gt;


&lt;p&gt;
  I think this is a good illustration of the &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; operator in
  Clojure, which is also called the &quot;thrush&quot; operator.  Basically,
  this operator can be thought of as taking the result from one
  expression and putting it at the end of the next expression.
&lt;/p&gt;
&lt;p&gt;
  In this case, we start out with a list of digits.  We then partition
  them into pairs, padding with a zero if necessary.  We then take the
  pairs and double the second number in the pair, concatenating all
  the pairs back into a single list.  We then sum up all the digits in
  the list, using the &lt;code&gt;reduce&lt;/code&gt; function.  This leaves us with a
  number.  We get its value \(\mod 10\) and test whether it is equal
  to zero.  If it is, we return &lt;code&gt;true&lt;/code&gt;, otherwise we return &lt;code&gt;false&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  All of this could be written with nested expressions (and the thrush
  operator is simply a macro that rewrites what you see as nested
  expressions), but I think the way it is written nicely shows what
  the data is doing in the function.
&lt;/p&gt;
&lt;p&gt;
  Anyway, I don&#39;t know if this solution will get me a job, but it was
  a bit of fun coding and didn&#39;t take too long.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/luhnybin/#comments" type="text/html" />


	<link rel="comments" href="/posts/luhnybin/comments.atom" type="application/atom+xml" />

</entry>

</feed>
