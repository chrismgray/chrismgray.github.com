<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom">
<title>pages tagged computational-geometry</title>
<link href="http://chrismgray.github.com//tags/computational-geometry/"/>
<link href="http://chrismgray.github.com//tags/computational-geometry/index.atom" rel="self" type="application/atom+xml"/>
<author>

<name>Hiking and Coding</name>

</author>




<id>http://chrismgray.github.com//tags/computational-geometry/</id>

<subtitle type="html">Hiking and Coding</subtitle>
<generator uri="http://ikiwiki.info/" version="3.20111106">ikiwiki</generator>
<updated>2011-12-02T22:05:50Z</updated>
<entry>
	<title>Convex Hulls</title>

	<id>http://chrismgray.github.com//posts/convex-hulls/</id>

	<link href="http://chrismgray.github.com//posts/convex-hulls/"/>






	<category term="clojure" />

	<category term="computational-geometry" />

	<category term="convex-hull" />

	<category term="ikiwiki" />

	<category term="lab-notes" />


	<updated>2011-12-02T22:05:50Z</updated>
	<published>2011-11-30T18:06:31Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Convex Hulls Three Ways &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  Whenever I watch cooking competition shows, they always have chefs
  presenting a foodstuff cooked in multiple different ways.  Today,
  I&#39;m doing that with algorithms.
&lt;/p&gt;
&lt;p&gt;
  The algorithm in question today is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Convex_hull&quot;&gt;convex hull&lt;/a&gt; algorithm.  In
  order of implementation complexity, and descending order of
  theoretical running time, there is the Jarvis March, Graham&#39;s Scan,
  and Chan&#39;s Algorithm.  All three are implemented in Clojure in my
  &lt;a href=&quot;https://github.com/chrismgray/convex-hull&quot;&gt;github repository&lt;/a&gt;.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;Jarvis March &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;


&lt;p&gt;
   The simplest of the algorithms, the Jarvis March was also one of
   the first output-sensitive computational geometry algorithms.  In a
   nutshell, you first find a point that you know to be on the convex
   hull, and then you find the next point by looking at all the rest
   of the points and determining which one has a segment that has the
   property that all the rest of the points are on one side of it.
   You repeatedly find the next point using this procedure until you
   get back to the first point.  There is basically no way to
   implement this algorithm that does not have a running time of
   \(O(hn)\), where \(h\) is the number of points on the convex hull
   and \(n\) is the number of input points.
&lt;/p&gt;
&lt;p&gt;
   The one implementation detail of the Jarvis March that is
   interesting is that whenever you see the concept of &quot;finding the
   next thing&quot; given some previous information, the Clojure
   implementation should almost always be lazy.  It turns out that
   implementing Jarvis March lazily will help in implementing Chan&#39;s
   Algorithm, so keep that in mind.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Graham&#39;s Scan &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;


&lt;p&gt;
   Graham&#39;s Scan is one of the algorithms I remember most vividly from
   the undergraduate computational geometry course that I took.  The
   professor, Godfried Toussaint, always referred to it as the &quot;three
   coins&quot; algorithm, so I have kept up that tradition in some of my
   function names in my implementation.
&lt;/p&gt;
&lt;p&gt;
   The algorithm first makes a polygon of the input points by sorting
   them by angle about the bottom-most point.  Then it goes around the
   polygon with a stack, pushing and popping points as it goes.  If
   that sounds familiar, it should &amp;ndash; it&#39;s the same idea as what I was
   talking about when I brought up the idea of &lt;a href=&quot;http://chrismgray.github.com/posts/parsing-polygons/&quot;&gt;parsing polygons&lt;/a&gt; a week
   and a half ago. 
&lt;/p&gt;
&lt;p&gt;
   Thus, I used the same polygon-parsing monad in my implementation as
   when I computed the visibility polygons last week.  It still works
   just as well.
&lt;/p&gt;
&lt;p&gt;
   Since the points must be sorted, Graham&#39;s Scan takes \(\Theta(n
   \log n)\).  Sorting can be reduced to computing convex hulls, so
   computing convex hulls has a \(\Omega(n \log n)\) lower bound,
   meaning that this algorithm is optimal.
&lt;/p&gt;
&lt;p&gt;
   But Chan&#39;s algorithm is better.  Weird huh?
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Chan&#39;s Algorithm &lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;


&lt;p&gt;
   I must confess that I had always been a little intimidated by
   Chan&#39;s Algorithm.  It was invented by Timothy Chan, who has a
   well-earned reputation for being a genius, so I thought it would be
   really complicated.  It&#39;s not.  There is a decent &lt;a href=&quot;http://en.wikipedia.org/wiki/Chan&#39;s_algorithm&quot;&gt;description&lt;/a&gt; of it
   on Wikipedia, so I won&#39;t go into the details.  The gist is that you
   combine the two previous algorithms that I discussed.  The Jarvis
   March needs to be modified so that the points can be input as a
   list of smaller convex hulls, and the next point on the convex hull
   is found by doing a binary search on the smaller convex hulls.  But
   that is really the hardest part about the algorithm.  I have put
   the whole thing below, because I think it&#39;s pretty beautiful.
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;chans-algorithm&lt;/span&gt;
  &lt;span style=&quot;color: #8fb28f;&quot;&gt;&quot;Finds the convex hull of a set of points by&lt;/span&gt;
&lt;span style=&quot;color: #8fb28f;&quot;&gt;   the algorithm known as &#39;Chan&#39;s Algorithm&#39;.&quot;&lt;/span&gt;
  [pts]
  (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [bottom-pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;apply&lt;/span&gt; min-key &lt;span style=&quot;color: #dca3a3; font-weight: bold;&quot;&gt;:y&lt;/span&gt; pts)]
   (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;loop&lt;/span&gt; [m 3] &lt;span style=&quot;color: #708070;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;start out with triangles&lt;/span&gt;
     (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [partitioned-pts (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;partition&lt;/span&gt; m m [] pts)
           c-hs (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;map&lt;/span&gt; grahams-scan partitioned-pts)
           potential-ch (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;take&lt;/span&gt; m (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;apply&lt;/span&gt; jarvis-march pts c-hs))]
       (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;=&lt;/span&gt; bottom-pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;last&lt;/span&gt; potential-ch)) &lt;span style=&quot;color: #708070;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;assumes jarvis-march returns bottom-pt last&lt;/span&gt;
         potential-ch
         (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;recur&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;min&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;*&lt;/span&gt; m m) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;count&lt;/span&gt; pts))))))))
&lt;/pre&gt;




&lt;p&gt;
   The great thing about Chan&#39;s Algorithm is that it is also
   output-sensitive.  But instead of being \(O(nh)\) (which is
   \(O(n&lt;sup&gt;2&lt;/sup&gt;)\) in the worst case), it is \(O(n \log h)\), which is at
   least as good as Graham&#39;s Scan, but often better.  It is also quite
   simple to implement, given decent implementations of Jarvis March
   and Graham&#39;s Scan.  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Conclusion &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  Convex hull algorithms are great.  If I was ever to teach a
  computational geometry course (admittedly that&#39;s looking like a long
  shot now), I might start and finish the course with them.  The
  progression from the ultra-simple Jarvis March to the
  more-complicated Chan&#39;s Algorithm is really nice, and there are
  interesting new things to talk about the whole way.  They also show
  that computational geometry is not so hard to do in a functional
  style.  In fact, using laziness is what makes the implementation of
  Chan&#39;s Algorithm so simple.  So this might make a nice talk to give
  people who are already into functional programming as well.
&lt;/p&gt;
&lt;p&gt;
  The next thing I have in mind for this project is to animate the
  algorithms.  Viewing the output of algorithms is already pretty easy
  using Processing, but I would like to be able to see them as they
  are operating.  It would be great if I could do that without
  changing the code too much.  I have a couple of ideas, but I&#39;m not
  sure if they&#39;ll work yet.
&lt;/p&gt;
&lt;p&gt;
  Also, it is slightly embarrassing to admit, but my blogging system
  seems to not support putting images in posts.  So I am going to have
  to figure out how to work around (or even fix) that before I can
  show any results.
&lt;/p&gt;





&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/convex-hulls/#comments" type="text/html" />


	<link rel="comments" href="/posts/convex-hulls/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Visibility Polygons</title>

	<id>http://chrismgray.github.com//posts/visibility-polygon/</id>

	<link href="http://chrismgray.github.com//posts/visibility-polygon/"/>






	<category term="clojure" />

	<category term="computational-geometry" />

	<category term="lab-notes" />

	<category term="visibility-polygon" />


	<updated>2011-12-01T07:45:06Z</updated>
	<published>2011-11-21T19:44:43Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Visibility Polygon &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I&#39;ve put up some preliminary code for finding visibility polygons on
  my &lt;a href=&quot;https://github.com/chrismgray/visibility-polygon&quot;&gt;github repo&lt;/a&gt;.  I have only tested it with one polygon, but so far
  things are looking good.  My idea from yesterday of using monads to
  &quot;parse&quot; the polygon seems to be paying off.  Here is the relevant
  code:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn-&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;add-new-pt&lt;/span&gt; [poly]
  (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;fn&lt;/span&gt; [pt stack]
    (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;when&lt;/span&gt; (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;or&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;empty?&lt;/span&gt; stack) &lt;span style=&quot;color: #708070;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #7f9f7f;&quot;&gt;First two points are guaranteed to be visible&lt;/span&gt;
              (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;empty?&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;rest&lt;/span&gt; stack))
              (visible? pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; poly) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; stack)))
      [pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;rest&lt;/span&gt; poly) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;cons&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; poly) stack)])))

(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn-&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;pop-stack&lt;/span&gt; [poly]
  (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;fn&lt;/span&gt; [pt stack]
    (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [the-seg (seg/new-seg pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; poly))
          top-seg (seg/new-seg (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; stack) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;second&lt;/span&gt; stack))]
      (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;when&lt;/span&gt; (pt/left-turn? (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;second&lt;/span&gt; stack) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; stack) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; poly))
        (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;if&lt;/span&gt; (seg/intersection-on-seg? the-seg top-seg)
          [pt poly (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;cons&lt;/span&gt; (seg/&lt;span style=&quot;color: #dfdfbf; font-weight: bold;&quot;&gt;intersection&lt;/span&gt; the-seg top-seg) stack)]
          [pt poly (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;rest&lt;/span&gt; stack)])))))

(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn-&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;skip-pt&lt;/span&gt; [poly]
  (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;fn&lt;/span&gt; [pt stack]
   (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;let&lt;/span&gt; [the-seg (seg/new-seg pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; stack))
         poly-seg (seg/new-seg (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; poly) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;second&lt;/span&gt; poly))]
     (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;when&lt;/span&gt; (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;not&lt;/span&gt; (pt/left-turn? (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;second&lt;/span&gt; stack) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; stack) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;first&lt;/span&gt; poly)))
       (&lt;span style=&quot;color: #8cd0d3;&quot;&gt;if&lt;/span&gt; (seg/intersection-on-seg? the-seg poly-seg)
         [pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;cons&lt;/span&gt; (seg/&lt;span style=&quot;color: #dfdfbf; font-weight: bold;&quot;&gt;intersection&lt;/span&gt; the-seg poly-seg) (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;rest&lt;/span&gt; poly)) stack]
         [pt (&lt;span style=&quot;color: #f0dfaf;&quot;&gt;rest&lt;/span&gt; poly) stack])))))

(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn-&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;all-conditions&lt;/span&gt; [poly]
  (with-monad polygon-parser-m
    (m-plus (add-new-pt poly) (pop-stack poly) (skip-pt poly))))
&lt;/pre&gt;




&lt;p&gt;
  This defines three actions to be performed when the polygon and
  stack are in certain configurations.  The first executes when the
  next point on the polygon doesn&#39;t obscure any of the stack.  In that
  case, it removes the point from &lt;code&gt;poly&lt;/code&gt; and puts it on &lt;code&gt;stack&lt;/code&gt;.  The
  second executes by popping points off the stack until the next point
  on the polygon no longer obscures the stack.  The final condition
  activates when the next point on the polygon is hidden by the
  stack.  It skips the points of &lt;code&gt;poly&lt;/code&gt; until it finds one that would
  be visible.  We combine the three conditions using &lt;code&gt;m-plus&lt;/code&gt;, which
  is defined to try the conditions in order until one returns
  something that is not &lt;code&gt;nil&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Is this solution any better than a functional programming solution
  without monads?  I think it is.  First, the conditions are easy to
  see and very explicitly laid out.  Using a &lt;code&gt;cond&lt;/code&gt; to accomplish the
  same thing is certainly possible, but gets more complicated as the
  number of conditions grows.  Also, we are explicitly managing state
  in this solution.  Doing so in an ad-hoc manner would be much more
  difficult.  In fact, I am not really sure how I would loop until
  there are no more points in &lt;code&gt;poly&lt;/code&gt; in a solution without monads
  (especially since not all the conditions consume a point from
  &lt;code&gt;poly&lt;/code&gt;).  With monads, it is quite simple:
&lt;/p&gt;



&lt;pre class=&quot;src src-clojure&quot;&gt;(&lt;span style=&quot;color: #f0dfaf; font-weight: bold;&quot;&gt;defn-&lt;/span&gt; &lt;span style=&quot;color: #8cd0d3;&quot;&gt;visibility-polygon-helper&lt;/span&gt; [pt poly]
  ((with-monad polygon-parser-m
     (m-until empty? all-conditions poly)) pt []))
&lt;/pre&gt;




&lt;p&gt;
  Doing something like that with a &lt;code&gt;reduce&lt;/code&gt; seems like it would veer
  off into unreadability fairly quickly.
&lt;/p&gt;
&lt;p&gt;
  Are there downsides to this solution?  I think there is at least
  one.  That is, the conditions must be functions that return functions.
  This makes them a bit more confusing than they really should be.  I
  needed to do this so that I could have a test in the &lt;code&gt;m-until&lt;/code&gt;
  function above.  On the whole, though, this is a fairly cosmetic
  gripe, and can be hidden by using helper functions like the one
  above.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;On the horizon &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  I would like to test the code quite a bit more.  However, doing so
  by drawing out polygons by hand and then figuring out their
  visibility polygons is quite tedious.  Therefore, I need some sort
  of GUI to be able to draw polygons and then I will be able to
  see whether the computed visibility polygon makes sense.
&lt;/p&gt;
&lt;p&gt;
  I am thinking that it might be nice to use the &lt;a href=&quot;https://github.com/rosado/clj-processing&quot;&gt;&lt;code&gt;clj-processing&lt;/code&gt; library&lt;/a&gt; to do this.  Unfortunately, that library is currently only
  using Clojure 1.2.  Since I am using Clojure 1.3, that might be a
  problem.  So I might need to do some porting from 1.2 to 1.3.
  However, doing so should give me a good idea of how processing
  works, and could give a nice tool for more interactive geometry
  programs. 
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/visibility-polygon/#comments" type="text/html" />


	<link rel="comments" href="/posts/visibility-polygon/comments.atom" type="application/atom+xml" />

</entry>
<entry>
	<title>Parsing Polygons</title>

	<id>http://chrismgray.github.com//posts/parsing-polygons/</id>

	<link href="http://chrismgray.github.com//posts/parsing-polygons/"/>






	<category term="computational-geometry" />

	<category term="lab-notes" />

	<category term="visibility-polygon" />


	<updated>2011-12-01T07:44:52Z</updated>
	<published>2011-11-21T00:58:28Z</published>

	<content type="html" xml:lang="en">
	&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Functional programming &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
  I&#39;ve gotten a bit obsessed by functional programming over the last
  couple of years.  I have even seriously thought about writing a book
  that looks at computational geometry (which is the subject in which
  I was trained) in the light of functional programming.  Most of the
  standard computational-geometry texts these days approach the
  writing of code from an imperative standpoint.
&lt;/p&gt;
&lt;p&gt;
  I think functional programming is a good way to think about
  computational geometry for a couple of reasons.  First, most
  problems in computational geometry can be expressed in a purely
  functional manner.  That is, the answers to the problems are usually
  the same given the same inputs.  Secondly, I have bought into the
  idea that parallel and distributed computing are much easier when
  state is not being modified.  Functional programming forces you to
  think this way.  While many problems in computational geometry are
  inherently sequential, not all of them are.  Using a programming
  method that allows for the easy addition of more cores seems like a
  good practice when a problem is encountered that is easily made
  parallel. 
&lt;/p&gt;
&lt;p&gt;
  One of the things I have been thinking about as a final chapter for
  the book that I would like to write is the introduction of monads as
  a way to &quot;parse&quot; polygons.  Monads are commonly used (well, commonly
  in the functional programming world) to parse strings.  They
  generally scan through with the aid of a stack.  There are many
  algorithms that scan through the points of a polygon with a stack --
  the example that I have thought about the most is the visibility
  polygon.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Visibility polygons &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
  A &lt;i&gt;visibility polygon&lt;/i&gt; is the subset of a polygon that can be &quot;seen&quot;
  from a point inside the polygon.  Here, we regard the segments of
  the polygon as opaque walls.
&lt;/p&gt;
&lt;p&gt;
  The standard algorithm for computing the visibility polygon is not
  too difficult to implement in an imperative language.  In fact, I
  &lt;a href=&quot;http://www.win.tue.nl/~cgray/ipelets.html&quot;&gt;implemented&lt;/a&gt; it already in C++ for the drawing editor &lt;a href=&quot;http://tclab.kaist.ac.kr/ipe/&quot;&gt;ipe&lt;/a&gt;.  (Though I
  think that code is now obsolete since the release of ipe 7.)
&lt;/p&gt;
&lt;p&gt;
  I&#39;ve already tipped my hand at how I would think about implementing
  such an algorithm in a functional language.  I would use a variant
  of a monadic parser to go through the polygon and find the parts
  that are visible.  (That last sentence doesn&#39;t give much of a hint
  about how it&#39;s done, but the whole algorithm would take too much
  space to describe.  Suffice it to say that a stack is kept with the
  &quot;currently visible&quot; portion of the polygon always on the stack.)
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Monads &lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
  I used monads &lt;a href=&quot;http://chrismgray.github.com/posts/time-series-2/&quot;&gt;earlier&lt;/a&gt; to make a framework for creating and comparing
  time-series.  However, I only used a monad that was already defined
  by someone else.  I think I might need to define a monad on my own
  this time &amp;ndash; a slightly daunting idea.  I definitely need to read
  the rest of &lt;a href=&quot;http://intensivesystems.s3-website-us-east-1.amazonaws.com/tutorials/monads_201.html&quot;&gt;Jim Duey&#39;s tutorial&lt;/a&gt; to make sense of how to do it.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

	</content>


	<link rel="comments" href="/posts/parsing-polygons/#comments" type="text/html" />


	<link rel="comments" href="/posts/parsing-polygons/comments.atom" type="application/atom+xml" />

</entry>

</feed>
